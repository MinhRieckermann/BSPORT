import { ElementRef, EventEmitter, QueryList, AfterViewInit, Renderer2, ChangeDetectorRef } from '@angular/core';
import { NgxPrettyToggleComponent } from './ngx-pretty-toggle.component';
import { PrettyCheckboxAnimation, PrettyCheckBoxChange, PrettyCheckboxColor, PrettyCheckboxShape, PrettyCheckboxStroke } from '../model/interfaces';
import { NgxPrettyToggleWillChangeComponent } from './ngx-pretty-toggle-will-change.component';
import * as ɵngcc0 from '@angular/core';
export declare class NgxPrettyCheckboxComponent implements AfterViewInit {
    private renderer;
    private el;
    private cd;
    private _stroke;
    private _shape;
    private _animation;
    private _isSwitch;
    private _bigger;
    private _enableFocus;
    private _plain;
    private _outline;
    private _color;
    readonly _prefix = "p-";
    readonly _outlinePrefix = "-o";
    checked: boolean;
    disabled: boolean;
    value: any;
    lock: boolean;
    private _inputElem;
    private _stateElem;
    change: EventEmitter<PrettyCheckBoxChange>;
    private _iconDir;
    private _svgDir;
    private _imgDir;
    private _hoverDir;
    private _hoverWillChangeDir;
    private _indeterminateDir;
    private _indeterminateWillChangeDir;
    _toggleComps: QueryList<NgxPrettyToggleComponent>;
    _toggleWillChangeComps: QueryList<NgxPrettyToggleWillChangeComponent>;
    constructor(renderer: Renderer2, el: ElementRef, cd: ChangeDetectorRef, _stroke: PrettyCheckboxStroke, _shape: PrettyCheckboxShape, _animation: PrettyCheckboxAnimation, _isSwitch: boolean, _bigger: boolean, _enableFocus: boolean, _plain: boolean, _outline: boolean, _color: PrettyCheckboxColor);
    ngAfterViewInit(): void;
    _onChange(event: Event, checked: boolean, value: string): void;
    readonly _isToggle: boolean;
    setIndeterminate(value?: boolean): void;
    forceCheck(check: boolean): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxPrettyCheckboxComponent, [null, null, null, { attribute: "stroke"; }, { attribute: "shape"; }, { attribute: "animation"; }, { attribute: "isSwitch"; }, { attribute: "bigger"; }, { attribute: "enableFocus"; }, { attribute: "plain"; }, { attribute: "outline"; }, { attribute: "color"; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgxPrettyCheckboxComponent, "ngx-pretty-checkbox:not([will-change]), p-checkbox:not([will-change])", ["ngxPrettyCheckbox"], { "checked": "checked"; "disabled": "disabled"; "lock": "lock"; "value": "value"; }, { "change": "change"; }, ["_iconDir", "_svgDir", "_imgDir", "_hoverDir", "_hoverWillChangeDir", "_indeterminateDir", "_indeterminateWillChangeDir", "_toggleComps", "_toggleWillChangeComps"], ["[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]", "*", "ngx-p-indeterminate, p-indeterminate, ngx-p-hover, p-hover, ngx-p-toggle, p-toggle"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXByZXR0eS1jaGVja2JveC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsibmd4LXByZXR0eS1jaGVja2JveC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIFF1ZXJ5TGlzdCwgQWZ0ZXJWaWV3SW5pdCwgUmVuZGVyZXIyLCBDaGFuZ2VEZXRlY3RvclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBOZ3hQcmV0dHlUb2dnbGVDb21wb25lbnQgfSBmcm9tICcuL25neC1wcmV0dHktdG9nZ2xlLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFByZXR0eUNoZWNrYm94QW5pbWF0aW9uLCBQcmV0dHlDaGVja0JveENoYW5nZSwgUHJldHR5Q2hlY2tib3hDb2xvciwgUHJldHR5Q2hlY2tib3hTaGFwZSwgUHJldHR5Q2hlY2tib3hTdHJva2UgfSBmcm9tICcuLi9tb2RlbC9pbnRlcmZhY2VzJztcclxuaW1wb3J0IHsgTmd4UHJldHR5VG9nZ2xlV2lsbENoYW5nZUNvbXBvbmVudCB9IGZyb20gJy4vbmd4LXByZXR0eS10b2dnbGUtd2lsbC1jaGFuZ2UuY29tcG9uZW50JztcclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmd4UHJldHR5Q2hlY2tib3hDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcclxuICAgIHByaXZhdGUgcmVuZGVyZXI7XHJcbiAgICBwcml2YXRlIGVsO1xyXG4gICAgcHJpdmF0ZSBjZDtcclxuICAgIHByaXZhdGUgX3N0cm9rZTtcclxuICAgIHByaXZhdGUgX3NoYXBlO1xyXG4gICAgcHJpdmF0ZSBfYW5pbWF0aW9uO1xyXG4gICAgcHJpdmF0ZSBfaXNTd2l0Y2g7XHJcbiAgICBwcml2YXRlIF9iaWdnZXI7XHJcbiAgICBwcml2YXRlIF9lbmFibGVGb2N1cztcclxuICAgIHByaXZhdGUgX3BsYWluO1xyXG4gICAgcHJpdmF0ZSBfb3V0bGluZTtcclxuICAgIHByaXZhdGUgX2NvbG9yO1xyXG4gICAgcmVhZG9ubHkgX3ByZWZpeCA9IFwicC1cIjtcclxuICAgIHJlYWRvbmx5IF9vdXRsaW5lUHJlZml4ID0gXCItb1wiO1xyXG4gICAgY2hlY2tlZDogYm9vbGVhbjtcclxuICAgIGRpc2FibGVkOiBib29sZWFuO1xyXG4gICAgdmFsdWU6IGFueTtcclxuICAgIGxvY2s6IGJvb2xlYW47XHJcbiAgICBwcml2YXRlIF9pbnB1dEVsZW07XHJcbiAgICBwcml2YXRlIF9zdGF0ZUVsZW07XHJcbiAgICBjaGFuZ2U6IEV2ZW50RW1pdHRlcjxQcmV0dHlDaGVja0JveENoYW5nZT47XHJcbiAgICBwcml2YXRlIF9pY29uRGlyO1xyXG4gICAgcHJpdmF0ZSBfc3ZnRGlyO1xyXG4gICAgcHJpdmF0ZSBfaW1nRGlyO1xyXG4gICAgcHJpdmF0ZSBfaG92ZXJEaXI7XHJcbiAgICBwcml2YXRlIF9ob3ZlcldpbGxDaGFuZ2VEaXI7XHJcbiAgICBwcml2YXRlIF9pbmRldGVybWluYXRlRGlyO1xyXG4gICAgcHJpdmF0ZSBfaW5kZXRlcm1pbmF0ZVdpbGxDaGFuZ2VEaXI7XHJcbiAgICBfdG9nZ2xlQ29tcHM6IFF1ZXJ5TGlzdDxOZ3hQcmV0dHlUb2dnbGVDb21wb25lbnQ+O1xyXG4gICAgX3RvZ2dsZVdpbGxDaGFuZ2VDb21wczogUXVlcnlMaXN0PE5neFByZXR0eVRvZ2dsZVdpbGxDaGFuZ2VDb21wb25lbnQ+O1xyXG4gICAgY29uc3RydWN0b3IocmVuZGVyZXI6IFJlbmRlcmVyMiwgZWw6IEVsZW1lbnRSZWYsIGNkOiBDaGFuZ2VEZXRlY3RvclJlZiwgX3N0cm9rZTogUHJldHR5Q2hlY2tib3hTdHJva2UsIF9zaGFwZTogUHJldHR5Q2hlY2tib3hTaGFwZSwgX2FuaW1hdGlvbjogUHJldHR5Q2hlY2tib3hBbmltYXRpb24sIF9pc1N3aXRjaDogYm9vbGVhbiwgX2JpZ2dlcjogYm9vbGVhbiwgX2VuYWJsZUZvY3VzOiBib29sZWFuLCBfcGxhaW46IGJvb2xlYW4sIF9vdXRsaW5lOiBib29sZWFuLCBfY29sb3I6IFByZXR0eUNoZWNrYm94Q29sb3IpO1xyXG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XHJcbiAgICBfb25DaGFuZ2UoZXZlbnQ6IEV2ZW50LCBjaGVja2VkOiBib29sZWFuLCB2YWx1ZTogc3RyaW5nKTogdm9pZDtcclxuICAgIHJlYWRvbmx5IF9pc1RvZ2dsZTogYm9vbGVhbjtcclxuICAgIHNldEluZGV0ZXJtaW5hdGUodmFsdWU/OiBib29sZWFuKTogdm9pZDtcclxuICAgIGZvcmNlQ2hlY2soY2hlY2s6IGJvb2xlYW4pOiB2b2lkO1xyXG59XHJcbiJdfQ==