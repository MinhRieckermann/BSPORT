import { EventEmitter, QueryList } from '@angular/core';
import { NgxPrettyHoverComponent } from './ngx-pretty-hover.component';
import { NgxPrettyIconDirective } from '../directives/ngx-pretty-icon.directive';
import { NgxPrettyImageDirective } from '../directives/ngx-pretty-image.directive';
import { NgxPrettySvgDirective } from '../directives/ngx-pretty-svg.directive';
import { NgxPrettyToggleComponent } from './ngx-pretty-toggle.component';
import { PrettyCheckboxAnimation, PrettyCheckBoxChange, PrettyCheckboxColor, PrettyCheckboxShape, PrettyCheckboxStroke } from '../model/interfaces';
import { NgxPrettyHoverWillChangeComponent } from './ngx-pretty-hover-will-change.component';
import { NgxPrettyToggleWillChangeComponent } from './ngx-pretty-toggle-will-change.component';
import { NgxPrettyRadioGroupDirective } from './ngx-pretty-radio-group.component';
import * as ɵngcc0 from '@angular/core';
export declare class NgxPrettyRadioWillChangeComponent {
    private radioGroup;
    constructor(radioGroup: NgxPrettyRadioGroupDirective);
    readonly _prefix = "p-";
    readonly _outlinePrefix = "-o";
    private _inputElem;
    change: EventEmitter<PrettyCheckBoxChange>;
    stroke: PrettyCheckboxStroke;
    shape: PrettyCheckboxShape;
    animation: PrettyCheckboxAnimation;
    color: PrettyCheckboxColor;
    outline: boolean;
    checked: boolean;
    disabled: boolean;
    value: any;
    radioGroupName: string;
    name: string;
    isSwitch: boolean;
    lock: boolean;
    bigger: boolean;
    enableFocus: boolean;
    plain: boolean;
    readonly _isFill: boolean;
    readonly _isSlim: boolean;
    readonly _isThick: boolean;
    readonly _isCurve: boolean;
    readonly _isRound: boolean;
    readonly _isSmooth: boolean;
    readonly _isJelly: boolean;
    readonly _isTada: boolean;
    readonly _isRotate: boolean;
    readonly _isPulse: boolean;
    _toggleComp: QueryList<NgxPrettyToggleComponent>;
    _toggleWillChangeComp: QueryList<NgxPrettyToggleWillChangeComponent>;
    readonly _isToggle: boolean;
    readonly _isDefault: boolean;
    _iconElem: NgxPrettyIconDirective;
    _svgElem: NgxPrettySvgDirective;
    _imageElem: NgxPrettyImageDirective;
    _hoverWillChangeDir: NgxPrettyHoverWillChangeComponent;
    _hoverComp: NgxPrettyHoverComponent;
    readonly _isHover: NgxPrettyHoverComponent | NgxPrettyHoverWillChangeComponent;
    _onChange(event: Event, checked: boolean, value: string): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxPrettyRadioWillChangeComponent, [{ optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgxPrettyRadioWillChangeComponent, "ngx-pretty-radio[will-change], p-radio[will-change]", ["ngxPrettyRadio"], { "outline": "outline"; "checked": "checked"; "disabled": "disabled"; "isSwitch": "isSwitch"; "lock": "lock"; "bigger": "bigger"; "enableFocus": "enableFocus"; "plain": "plain"; "stroke": "stroke"; "shape": "shape"; "animation": "animation"; "color": "color"; "value": "value"; "name": "name"; }, { "change": "change"; }, ["_iconElem", "_svgElem", "_imageElem", "_hoverWillChangeDir", "_hoverComp", "_toggleComp", "_toggleWillChangeComp"], ["[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]", "*", "ngx-p-indeterminate, p-indeterminate, ngx-p-hover, p-hover, ngx-p-toggle, p-toggle"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXByZXR0eS1yYWRpby13aWxsLWNoYW5nZS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsibmd4LXByZXR0eS1yYWRpby13aWxsLWNoYW5nZS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIFF1ZXJ5TGlzdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBOZ3hQcmV0dHlIb3ZlckNvbXBvbmVudCB9IGZyb20gJy4vbmd4LXByZXR0eS1ob3Zlci5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBOZ3hQcmV0dHlJY29uRGlyZWN0aXZlIH0gZnJvbSAnLi4vZGlyZWN0aXZlcy9uZ3gtcHJldHR5LWljb24uZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgTmd4UHJldHR5SW1hZ2VEaXJlY3RpdmUgfSBmcm9tICcuLi9kaXJlY3RpdmVzL25neC1wcmV0dHktaW1hZ2UuZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgTmd4UHJldHR5U3ZnRGlyZWN0aXZlIH0gZnJvbSAnLi4vZGlyZWN0aXZlcy9uZ3gtcHJldHR5LXN2Zy5kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBOZ3hQcmV0dHlUb2dnbGVDb21wb25lbnQgfSBmcm9tICcuL25neC1wcmV0dHktdG9nZ2xlLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFByZXR0eUNoZWNrYm94QW5pbWF0aW9uLCBQcmV0dHlDaGVja0JveENoYW5nZSwgUHJldHR5Q2hlY2tib3hDb2xvciwgUHJldHR5Q2hlY2tib3hTaGFwZSwgUHJldHR5Q2hlY2tib3hTdHJva2UgfSBmcm9tICcuLi9tb2RlbC9pbnRlcmZhY2VzJztcclxuaW1wb3J0IHsgTmd4UHJldHR5SG92ZXJXaWxsQ2hhbmdlQ29tcG9uZW50IH0gZnJvbSAnLi9uZ3gtcHJldHR5LWhvdmVyLXdpbGwtY2hhbmdlLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IE5neFByZXR0eVRvZ2dsZVdpbGxDaGFuZ2VDb21wb25lbnQgfSBmcm9tICcuL25neC1wcmV0dHktdG9nZ2xlLXdpbGwtY2hhbmdlLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IE5neFByZXR0eVJhZGlvR3JvdXBEaXJlY3RpdmUgfSBmcm9tICcuL25neC1wcmV0dHktcmFkaW8tZ3JvdXAuY29tcG9uZW50JztcclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmd4UHJldHR5UmFkaW9XaWxsQ2hhbmdlQ29tcG9uZW50IHtcclxuICAgIHByaXZhdGUgcmFkaW9Hcm91cDtcclxuICAgIGNvbnN0cnVjdG9yKHJhZGlvR3JvdXA6IE5neFByZXR0eVJhZGlvR3JvdXBEaXJlY3RpdmUpO1xyXG4gICAgcmVhZG9ubHkgX3ByZWZpeCA9IFwicC1cIjtcclxuICAgIHJlYWRvbmx5IF9vdXRsaW5lUHJlZml4ID0gXCItb1wiO1xyXG4gICAgcHJpdmF0ZSBfaW5wdXRFbGVtO1xyXG4gICAgY2hhbmdlOiBFdmVudEVtaXR0ZXI8UHJldHR5Q2hlY2tCb3hDaGFuZ2U+O1xyXG4gICAgc3Ryb2tlOiBQcmV0dHlDaGVja2JveFN0cm9rZTtcclxuICAgIHNoYXBlOiBQcmV0dHlDaGVja2JveFNoYXBlO1xyXG4gICAgYW5pbWF0aW9uOiBQcmV0dHlDaGVja2JveEFuaW1hdGlvbjtcclxuICAgIGNvbG9yOiBQcmV0dHlDaGVja2JveENvbG9yO1xyXG4gICAgb3V0bGluZTogYm9vbGVhbjtcclxuICAgIGNoZWNrZWQ6IGJvb2xlYW47XHJcbiAgICBkaXNhYmxlZDogYm9vbGVhbjtcclxuICAgIHZhbHVlOiBhbnk7XHJcbiAgICByYWRpb0dyb3VwTmFtZTogc3RyaW5nO1xyXG4gICAgbmFtZTogc3RyaW5nO1xyXG4gICAgaXNTd2l0Y2g6IGJvb2xlYW47XHJcbiAgICBsb2NrOiBib29sZWFuO1xyXG4gICAgYmlnZ2VyOiBib29sZWFuO1xyXG4gICAgZW5hYmxlRm9jdXM6IGJvb2xlYW47XHJcbiAgICBwbGFpbjogYm9vbGVhbjtcclxuICAgIHJlYWRvbmx5IF9pc0ZpbGw6IGJvb2xlYW47XHJcbiAgICByZWFkb25seSBfaXNTbGltOiBib29sZWFuO1xyXG4gICAgcmVhZG9ubHkgX2lzVGhpY2s6IGJvb2xlYW47XHJcbiAgICByZWFkb25seSBfaXNDdXJ2ZTogYm9vbGVhbjtcclxuICAgIHJlYWRvbmx5IF9pc1JvdW5kOiBib29sZWFuO1xyXG4gICAgcmVhZG9ubHkgX2lzU21vb3RoOiBib29sZWFuO1xyXG4gICAgcmVhZG9ubHkgX2lzSmVsbHk6IGJvb2xlYW47XHJcbiAgICByZWFkb25seSBfaXNUYWRhOiBib29sZWFuO1xyXG4gICAgcmVhZG9ubHkgX2lzUm90YXRlOiBib29sZWFuO1xyXG4gICAgcmVhZG9ubHkgX2lzUHVsc2U6IGJvb2xlYW47XHJcbiAgICBfdG9nZ2xlQ29tcDogUXVlcnlMaXN0PE5neFByZXR0eVRvZ2dsZUNvbXBvbmVudD47XHJcbiAgICBfdG9nZ2xlV2lsbENoYW5nZUNvbXA6IFF1ZXJ5TGlzdDxOZ3hQcmV0dHlUb2dnbGVXaWxsQ2hhbmdlQ29tcG9uZW50PjtcclxuICAgIHJlYWRvbmx5IF9pc1RvZ2dsZTogYm9vbGVhbjtcclxuICAgIHJlYWRvbmx5IF9pc0RlZmF1bHQ6IGJvb2xlYW47XHJcbiAgICBfaWNvbkVsZW06IE5neFByZXR0eUljb25EaXJlY3RpdmU7XHJcbiAgICBfc3ZnRWxlbTogTmd4UHJldHR5U3ZnRGlyZWN0aXZlO1xyXG4gICAgX2ltYWdlRWxlbTogTmd4UHJldHR5SW1hZ2VEaXJlY3RpdmU7XHJcbiAgICBfaG92ZXJXaWxsQ2hhbmdlRGlyOiBOZ3hQcmV0dHlIb3ZlcldpbGxDaGFuZ2VDb21wb25lbnQ7XHJcbiAgICBfaG92ZXJDb21wOiBOZ3hQcmV0dHlIb3ZlckNvbXBvbmVudDtcclxuICAgIHJlYWRvbmx5IF9pc0hvdmVyOiBOZ3hQcmV0dHlIb3ZlckNvbXBvbmVudCB8IE5neFByZXR0eUhvdmVyV2lsbENoYW5nZUNvbXBvbmVudDtcclxuICAgIF9vbkNoYW5nZShldmVudDogRXZlbnQsIGNoZWNrZWQ6IGJvb2xlYW4sIHZhbHVlOiBzdHJpbmcpOiB2b2lkO1xyXG59XHJcbiJdfQ==