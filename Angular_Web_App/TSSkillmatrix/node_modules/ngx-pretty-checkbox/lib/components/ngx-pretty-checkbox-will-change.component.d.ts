import { EventEmitter, QueryList, ChangeDetectorRef } from '@angular/core';
import { NgxPrettyHoverComponent } from './ngx-pretty-hover.component';
import { NgxPrettyIconDirective } from '../directives/ngx-pretty-icon.directive';
import { NgxPrettyImageDirective } from '../directives/ngx-pretty-image.directive';
import { NgxPrettyIndeterminateComponent } from './ngx-pretty-Indeterminate.component';
import { NgxPrettySvgDirective } from '../directives/ngx-pretty-svg.directive';
import { NgxPrettyToggleComponent } from './ngx-pretty-toggle.component';
import { PrettyCheckboxAnimation, PrettyCheckBoxChange, PrettyCheckboxColor, PrettyCheckboxShape, PrettyCheckboxStroke } from '../model/interfaces';
import { NgxPrettyHoverWillChangeComponent } from './ngx-pretty-hover-will-change.component';
import { NgxPrettyToggleWillChangeComponent } from './ngx-pretty-toggle-will-change.component';
import { NgxPrettyIndeterminateWillChangeComponent } from './ngx-pretty-Indeterminate-will-change.component';
import * as ɵngcc0 from '@angular/core';
export declare class NgxPrettyCheckboxWillChangeComponent {
    private cd;
    constructor(cd: ChangeDetectorRef);
    readonly _prefix = "p-";
    readonly _outlinePrefix = "-o";
    private _inputElem;
    change: EventEmitter<PrettyCheckBoxChange>;
    stroke: PrettyCheckboxStroke;
    shape: PrettyCheckboxShape;
    animation: PrettyCheckboxAnimation;
    color: PrettyCheckboxColor;
    outline: boolean;
    checked: boolean;
    disabled: boolean;
    value: any;
    isSwitch: boolean;
    lock: boolean;
    bigger: boolean;
    enableFocus: boolean;
    plain: boolean;
    readonly _isFill: boolean;
    readonly _isSlim: boolean;
    readonly _isThick: boolean;
    readonly _isCurve: boolean;
    readonly _isRound: boolean;
    readonly _isSmooth: boolean;
    readonly _isJelly: boolean;
    readonly _isTada: boolean;
    readonly _isRotate: boolean;
    readonly _isPulse: boolean;
    _toggleComp: QueryList<NgxPrettyToggleComponent>;
    _toggleWillChangeComp: QueryList<NgxPrettyToggleWillChangeComponent>;
    readonly _isToggle: boolean;
    readonly _isDefault: boolean;
    _iconElem: NgxPrettyIconDirective;
    _svgElem: NgxPrettySvgDirective;
    _imageElem: NgxPrettyImageDirective;
    _hoverWillChangeDir: NgxPrettyHoverWillChangeComponent;
    _hoverComp: NgxPrettyHoverComponent;
    readonly _isHover: NgxPrettyHoverComponent | NgxPrettyHoverWillChangeComponent;
    _indeterminateComp: NgxPrettyIndeterminateComponent;
    _indeterminateWillChangeComp: NgxPrettyIndeterminateWillChangeComponent;
    readonly _isIndeterminate: NgxPrettyIndeterminateComponent | NgxPrettyIndeterminateWillChangeComponent;
    _onChange(event: Event, checked: boolean, value: string): void;
    setIndeterminate(value?: boolean): void;
    forceCheck(check: boolean): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxPrettyCheckboxWillChangeComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgxPrettyCheckboxWillChangeComponent, "ngx-pretty-checkbox[will-change], p-checkbox[will-change]", ["ngxPrettyCheckboxWillChange"], { "outline": "outline"; "checked": "checked"; "disabled": "disabled"; "isSwitch": "isSwitch"; "lock": "lock"; "bigger": "bigger"; "enableFocus": "enableFocus"; "plain": "plain"; "stroke": "stroke"; "shape": "shape"; "animation": "animation"; "color": "color"; "value": "value"; }, { "change": "change"; }, ["_iconElem", "_svgElem", "_imageElem", "_hoverWillChangeDir", "_hoverComp", "_indeterminateComp", "_indeterminateWillChangeComp", "_toggleComp", "_toggleWillChangeComp"], ["[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]", "*", "ngx-p-indeterminate, p-indeterminate, ngx-p-hover, p-hover, ngx-p-toggle, p-toggle"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXByZXR0eS1jaGVja2JveC13aWxsLWNoYW5nZS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsibmd4LXByZXR0eS1jaGVja2JveC13aWxsLWNoYW5nZS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgUXVlcnlMaXN0LCBDaGFuZ2VEZXRlY3RvclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBOZ3hQcmV0dHlIb3ZlckNvbXBvbmVudCB9IGZyb20gJy4vbmd4LXByZXR0eS1ob3Zlci5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBOZ3hQcmV0dHlJY29uRGlyZWN0aXZlIH0gZnJvbSAnLi4vZGlyZWN0aXZlcy9uZ3gtcHJldHR5LWljb24uZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgTmd4UHJldHR5SW1hZ2VEaXJlY3RpdmUgfSBmcm9tICcuLi9kaXJlY3RpdmVzL25neC1wcmV0dHktaW1hZ2UuZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgTmd4UHJldHR5SW5kZXRlcm1pbmF0ZUNvbXBvbmVudCB9IGZyb20gJy4vbmd4LXByZXR0eS1JbmRldGVybWluYXRlLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IE5neFByZXR0eVN2Z0RpcmVjdGl2ZSB9IGZyb20gJy4uL2RpcmVjdGl2ZXMvbmd4LXByZXR0eS1zdmcuZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgTmd4UHJldHR5VG9nZ2xlQ29tcG9uZW50IH0gZnJvbSAnLi9uZ3gtcHJldHR5LXRvZ2dsZS5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBQcmV0dHlDaGVja2JveEFuaW1hdGlvbiwgUHJldHR5Q2hlY2tCb3hDaGFuZ2UsIFByZXR0eUNoZWNrYm94Q29sb3IsIFByZXR0eUNoZWNrYm94U2hhcGUsIFByZXR0eUNoZWNrYm94U3Ryb2tlIH0gZnJvbSAnLi4vbW9kZWwvaW50ZXJmYWNlcyc7XHJcbmltcG9ydCB7IE5neFByZXR0eUhvdmVyV2lsbENoYW5nZUNvbXBvbmVudCB9IGZyb20gJy4vbmd4LXByZXR0eS1ob3Zlci13aWxsLWNoYW5nZS5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBOZ3hQcmV0dHlUb2dnbGVXaWxsQ2hhbmdlQ29tcG9uZW50IH0gZnJvbSAnLi9uZ3gtcHJldHR5LXRvZ2dsZS13aWxsLWNoYW5nZS5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBOZ3hQcmV0dHlJbmRldGVybWluYXRlV2lsbENoYW5nZUNvbXBvbmVudCB9IGZyb20gJy4vbmd4LXByZXR0eS1JbmRldGVybWluYXRlLXdpbGwtY2hhbmdlLmNvbXBvbmVudCc7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5neFByZXR0eUNoZWNrYm94V2lsbENoYW5nZUNvbXBvbmVudCB7XHJcbiAgICBwcml2YXRlIGNkO1xyXG4gICAgY29uc3RydWN0b3IoY2Q6IENoYW5nZURldGVjdG9yUmVmKTtcclxuICAgIHJlYWRvbmx5IF9wcmVmaXggPSBcInAtXCI7XHJcbiAgICByZWFkb25seSBfb3V0bGluZVByZWZpeCA9IFwiLW9cIjtcclxuICAgIHByaXZhdGUgX2lucHV0RWxlbTtcclxuICAgIGNoYW5nZTogRXZlbnRFbWl0dGVyPFByZXR0eUNoZWNrQm94Q2hhbmdlPjtcclxuICAgIHN0cm9rZTogUHJldHR5Q2hlY2tib3hTdHJva2U7XHJcbiAgICBzaGFwZTogUHJldHR5Q2hlY2tib3hTaGFwZTtcclxuICAgIGFuaW1hdGlvbjogUHJldHR5Q2hlY2tib3hBbmltYXRpb247XHJcbiAgICBjb2xvcjogUHJldHR5Q2hlY2tib3hDb2xvcjtcclxuICAgIG91dGxpbmU6IGJvb2xlYW47XHJcbiAgICBjaGVja2VkOiBib29sZWFuO1xyXG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XHJcbiAgICB2YWx1ZTogYW55O1xyXG4gICAgaXNTd2l0Y2g6IGJvb2xlYW47XHJcbiAgICBsb2NrOiBib29sZWFuO1xyXG4gICAgYmlnZ2VyOiBib29sZWFuO1xyXG4gICAgZW5hYmxlRm9jdXM6IGJvb2xlYW47XHJcbiAgICBwbGFpbjogYm9vbGVhbjtcclxuICAgIHJlYWRvbmx5IF9pc0ZpbGw6IGJvb2xlYW47XHJcbiAgICByZWFkb25seSBfaXNTbGltOiBib29sZWFuO1xyXG4gICAgcmVhZG9ubHkgX2lzVGhpY2s6IGJvb2xlYW47XHJcbiAgICByZWFkb25seSBfaXNDdXJ2ZTogYm9vbGVhbjtcclxuICAgIHJlYWRvbmx5IF9pc1JvdW5kOiBib29sZWFuO1xyXG4gICAgcmVhZG9ubHkgX2lzU21vb3RoOiBib29sZWFuO1xyXG4gICAgcmVhZG9ubHkgX2lzSmVsbHk6IGJvb2xlYW47XHJcbiAgICByZWFkb25seSBfaXNUYWRhOiBib29sZWFuO1xyXG4gICAgcmVhZG9ubHkgX2lzUm90YXRlOiBib29sZWFuO1xyXG4gICAgcmVhZG9ubHkgX2lzUHVsc2U6IGJvb2xlYW47XHJcbiAgICBfdG9nZ2xlQ29tcDogUXVlcnlMaXN0PE5neFByZXR0eVRvZ2dsZUNvbXBvbmVudD47XHJcbiAgICBfdG9nZ2xlV2lsbENoYW5nZUNvbXA6IFF1ZXJ5TGlzdDxOZ3hQcmV0dHlUb2dnbGVXaWxsQ2hhbmdlQ29tcG9uZW50PjtcclxuICAgIHJlYWRvbmx5IF9pc1RvZ2dsZTogYm9vbGVhbjtcclxuICAgIHJlYWRvbmx5IF9pc0RlZmF1bHQ6IGJvb2xlYW47XHJcbiAgICBfaWNvbkVsZW06IE5neFByZXR0eUljb25EaXJlY3RpdmU7XHJcbiAgICBfc3ZnRWxlbTogTmd4UHJldHR5U3ZnRGlyZWN0aXZlO1xyXG4gICAgX2ltYWdlRWxlbTogTmd4UHJldHR5SW1hZ2VEaXJlY3RpdmU7XHJcbiAgICBfaG92ZXJXaWxsQ2hhbmdlRGlyOiBOZ3hQcmV0dHlIb3ZlcldpbGxDaGFuZ2VDb21wb25lbnQ7XHJcbiAgICBfaG92ZXJDb21wOiBOZ3hQcmV0dHlIb3ZlckNvbXBvbmVudDtcclxuICAgIHJlYWRvbmx5IF9pc0hvdmVyOiBOZ3hQcmV0dHlIb3ZlckNvbXBvbmVudCB8IE5neFByZXR0eUhvdmVyV2lsbENoYW5nZUNvbXBvbmVudDtcclxuICAgIF9pbmRldGVybWluYXRlQ29tcDogTmd4UHJldHR5SW5kZXRlcm1pbmF0ZUNvbXBvbmVudDtcclxuICAgIF9pbmRldGVybWluYXRlV2lsbENoYW5nZUNvbXA6IE5neFByZXR0eUluZGV0ZXJtaW5hdGVXaWxsQ2hhbmdlQ29tcG9uZW50O1xyXG4gICAgcmVhZG9ubHkgX2lzSW5kZXRlcm1pbmF0ZTogTmd4UHJldHR5SW5kZXRlcm1pbmF0ZUNvbXBvbmVudCB8IE5neFByZXR0eUluZGV0ZXJtaW5hdGVXaWxsQ2hhbmdlQ29tcG9uZW50O1xyXG4gICAgX29uQ2hhbmdlKGV2ZW50OiBFdmVudCwgY2hlY2tlZDogYm9vbGVhbiwgdmFsdWU6IHN0cmluZyk6IHZvaWQ7XHJcbiAgICBzZXRJbmRldGVybWluYXRlKHZhbHVlPzogYm9vbGVhbik6IHZvaWQ7XHJcbiAgICBmb3JjZUNoZWNrKGNoZWNrOiBib29sZWFuKTogdm9pZDtcclxufVxyXG4iXX0=