import { ElementRef, EventEmitter, QueryList, AfterViewInit, Renderer2 } from '@angular/core';
import { NgxPrettyToggleComponent } from './ngx-pretty-toggle.component';
import { PrettyCheckboxAnimation, PrettyCheckboxColor, PrettyCheckboxShape, PrettyCheckboxStroke, PrettyRadioChange } from '../model/interfaces';
import { NgxPrettyToggleWillChangeComponent } from './ngx-pretty-toggle-will-change.component';
import { NgxPrettyRadioGroupDirective } from './ngx-pretty-radio-group.component';
import * as ɵngcc0 from '@angular/core';
export declare class NgxPrettyRadioComponent implements AfterViewInit {
    private renderer;
    private el;
    private radioGroup;
    private _stroke;
    private _shape;
    private _animation;
    private _isSwitch;
    private _bigger;
    private _enableFocus;
    private _plain;
    private _outline;
    private _color;
    _name: string;
    readonly _prefix = "p-";
    readonly _outlinePrefix = "-o";
    checked: boolean;
    disabled: boolean;
    value: any;
    lock: boolean;
    private _inputElem;
    private _stateElem;
    change: EventEmitter<PrettyRadioChange>;
    private _iconDir;
    private _svgDir;
    private _imgDir;
    private _hoverDir;
    private _hoverWillChangeDir;
    _toggleComps: QueryList<NgxPrettyToggleComponent>;
    _toggleWillChangeComps: QueryList<NgxPrettyToggleWillChangeComponent>;
    constructor(renderer: Renderer2, el: ElementRef, radioGroup: NgxPrettyRadioGroupDirective, _stroke: PrettyCheckboxStroke, _shape: PrettyCheckboxShape, _animation: PrettyCheckboxAnimation, _isSwitch: boolean, _bigger: boolean, _enableFocus: boolean, _plain: boolean, _outline: boolean, _color: PrettyCheckboxColor, _name: string);
    ngAfterViewInit(): void;
    _onChange(event: Event, checked: boolean, value: string): void;
    readonly _isToggle: boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxPrettyRadioComponent, [null, null, { optional: true; }, { attribute: "stroke"; }, { attribute: "shape"; }, { attribute: "animation"; }, { attribute: "isSwitch"; }, { attribute: "bigger"; }, { attribute: "enableFocus"; }, { attribute: "plain"; }, { attribute: "outline"; }, { attribute: "color"; }, { attribute: "name"; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgxPrettyRadioComponent, "ngx-pretty-radio:not([will-change]), p-radio:not([will-change])", ["ngxPrettyRadio"], { "checked": "checked"; "disabled": "disabled"; "lock": "lock"; "value": "value"; }, { "change": "change"; }, ["_iconDir", "_svgDir", "_imgDir", "_hoverDir", "_hoverWillChangeDir", "_toggleComps", "_toggleWillChangeComps"], ["[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]", "*", "ngx-p-hover, p-hover, ngx-p-toggle, p-toggle"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXByZXR0eS1yYWRpby5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsibmd4LXByZXR0eS1yYWRpby5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgUXVlcnlMaXN0LCBBZnRlclZpZXdJbml0LCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTmd4UHJldHR5VG9nZ2xlQ29tcG9uZW50IH0gZnJvbSAnLi9uZ3gtcHJldHR5LXRvZ2dsZS5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBQcmV0dHlDaGVja2JveEFuaW1hdGlvbiwgUHJldHR5Q2hlY2tib3hDb2xvciwgUHJldHR5Q2hlY2tib3hTaGFwZSwgUHJldHR5Q2hlY2tib3hTdHJva2UsIFByZXR0eVJhZGlvQ2hhbmdlIH0gZnJvbSAnLi4vbW9kZWwvaW50ZXJmYWNlcyc7XHJcbmltcG9ydCB7IE5neFByZXR0eVRvZ2dsZVdpbGxDaGFuZ2VDb21wb25lbnQgfSBmcm9tICcuL25neC1wcmV0dHktdG9nZ2xlLXdpbGwtY2hhbmdlLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IE5neFByZXR0eVJhZGlvR3JvdXBEaXJlY3RpdmUgfSBmcm9tICcuL25neC1wcmV0dHktcmFkaW8tZ3JvdXAuY29tcG9uZW50JztcclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmd4UHJldHR5UmFkaW9Db21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcclxuICAgIHByaXZhdGUgcmVuZGVyZXI7XHJcbiAgICBwcml2YXRlIGVsO1xyXG4gICAgcHJpdmF0ZSByYWRpb0dyb3VwO1xyXG4gICAgcHJpdmF0ZSBfc3Ryb2tlO1xyXG4gICAgcHJpdmF0ZSBfc2hhcGU7XHJcbiAgICBwcml2YXRlIF9hbmltYXRpb247XHJcbiAgICBwcml2YXRlIF9pc1N3aXRjaDtcclxuICAgIHByaXZhdGUgX2JpZ2dlcjtcclxuICAgIHByaXZhdGUgX2VuYWJsZUZvY3VzO1xyXG4gICAgcHJpdmF0ZSBfcGxhaW47XHJcbiAgICBwcml2YXRlIF9vdXRsaW5lO1xyXG4gICAgcHJpdmF0ZSBfY29sb3I7XHJcbiAgICBfbmFtZTogc3RyaW5nO1xyXG4gICAgcmVhZG9ubHkgX3ByZWZpeCA9IFwicC1cIjtcclxuICAgIHJlYWRvbmx5IF9vdXRsaW5lUHJlZml4ID0gXCItb1wiO1xyXG4gICAgY2hlY2tlZDogYm9vbGVhbjtcclxuICAgIGRpc2FibGVkOiBib29sZWFuO1xyXG4gICAgdmFsdWU6IGFueTtcclxuICAgIGxvY2s6IGJvb2xlYW47XHJcbiAgICBwcml2YXRlIF9pbnB1dEVsZW07XHJcbiAgICBwcml2YXRlIF9zdGF0ZUVsZW07XHJcbiAgICBjaGFuZ2U6IEV2ZW50RW1pdHRlcjxQcmV0dHlSYWRpb0NoYW5nZT47XHJcbiAgICBwcml2YXRlIF9pY29uRGlyO1xyXG4gICAgcHJpdmF0ZSBfc3ZnRGlyO1xyXG4gICAgcHJpdmF0ZSBfaW1nRGlyO1xyXG4gICAgcHJpdmF0ZSBfaG92ZXJEaXI7XHJcbiAgICBwcml2YXRlIF9ob3ZlcldpbGxDaGFuZ2VEaXI7XHJcbiAgICBfdG9nZ2xlQ29tcHM6IFF1ZXJ5TGlzdDxOZ3hQcmV0dHlUb2dnbGVDb21wb25lbnQ+O1xyXG4gICAgX3RvZ2dsZVdpbGxDaGFuZ2VDb21wczogUXVlcnlMaXN0PE5neFByZXR0eVRvZ2dsZVdpbGxDaGFuZ2VDb21wb25lbnQ+O1xyXG4gICAgY29uc3RydWN0b3IocmVuZGVyZXI6IFJlbmRlcmVyMiwgZWw6IEVsZW1lbnRSZWYsIHJhZGlvR3JvdXA6IE5neFByZXR0eVJhZGlvR3JvdXBEaXJlY3RpdmUsIF9zdHJva2U6IFByZXR0eUNoZWNrYm94U3Ryb2tlLCBfc2hhcGU6IFByZXR0eUNoZWNrYm94U2hhcGUsIF9hbmltYXRpb246IFByZXR0eUNoZWNrYm94QW5pbWF0aW9uLCBfaXNTd2l0Y2g6IGJvb2xlYW4sIF9iaWdnZXI6IGJvb2xlYW4sIF9lbmFibGVGb2N1czogYm9vbGVhbiwgX3BsYWluOiBib29sZWFuLCBfb3V0bGluZTogYm9vbGVhbiwgX2NvbG9yOiBQcmV0dHlDaGVja2JveENvbG9yLCBfbmFtZTogc3RyaW5nKTtcclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xyXG4gICAgX29uQ2hhbmdlKGV2ZW50OiBFdmVudCwgY2hlY2tlZDogYm9vbGVhbiwgdmFsdWU6IHN0cmluZyk6IHZvaWQ7XHJcbiAgICByZWFkb25seSBfaXNUb2dnbGU6IGJvb2xlYW47XHJcbn1cclxuIl19