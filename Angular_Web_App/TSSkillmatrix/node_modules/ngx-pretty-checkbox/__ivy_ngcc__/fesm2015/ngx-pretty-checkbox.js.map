{"version":3,"file":"ngx-pretty-checkbox.js","sources":["ng:/ngx-pretty-checkbox/lib/model/params.ts","ng:/ngx-pretty-checkbox/lib/model/interfaces.ts","ng:/ngx-pretty-checkbox/lib/components/ngx-pretty-hover.component.ts","ng:/ngx-pretty-checkbox/lib/directives/ngx-pretty-icon.directive.ts","ng:/ngx-pretty-checkbox/lib/directives/ngx-pretty-image.directive.ts","ng:/ngx-pretty-checkbox/lib/components/ngx-pretty-Indeterminate.component.ts","ng:/ngx-pretty-checkbox/lib/directives/ngx-pretty-svg.directive.ts","ng:/ngx-pretty-checkbox/lib/components/ngx-pretty-toggle.component.ts","ng:/ngx-pretty-checkbox/lib/utility.ts","ng:/ngx-pretty-checkbox/lib/components/ngx-pretty-hover-will-change.component.ts","ng:/ngx-pretty-checkbox/lib/components/ngx-pretty-Indeterminate-will-change.component.ts","ng:/ngx-pretty-checkbox/lib/components/ngx-pretty-toggle-will-change.component.ts","ng:/ngx-pretty-checkbox/lib/components/ngx-pretty-checkbox.component.ts","ng:/ngx-pretty-checkbox/lib/components/ngx-pretty-checkbox-will-change.component.ts","ng:/ngx-pretty-checkbox/lib/ngx-pretty-checkbox.service.ts","ng:/ngx-pretty-checkbox/lib/components/ngx-pretty-radio-group.component.ts","ng:/ngx-pretty-checkbox/lib/components/ngx-pretty-radio.component.ts","ng:/ngx-pretty-checkbox/lib/components/ngx-pretty-radio-will-change.component.ts","ng:/ngx-pretty-checkbox/lib/ngx-pretty-checkbox.module.ts"],"names":[],"mappings":"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","sourcesContent":["export const DEFAULT_PRETTY_CLASS_NAME = 'pretty';\r\nexport const DEFAULT_PREFIX = 'p-';\r\nexport const DEFAULT_OUTLINE_PREFIX = '-o';\r\n\r\nexport const GROUP_NAME = 'p-radio';\r\n","export enum PrettyCheckBoxToggleType {\r\n  On = 'on',\r\n  Off = 'off'\r\n}\r\nexport enum PrettyCheckboxStroke {\r\n  // Accept Null\r\n  Fill = 'fill',   // Square and Switch\r\n  Thick = 'thick', // Square\r\n  Slim = 'slim' // Switch\r\n}\r\n\r\nexport enum PrettyCheckboxShape {\r\n  // Accept Null\r\n  Curve = 'curve',\r\n  Round = 'round',\r\n}\r\n\r\n\r\nexport enum PrettyCheckboxColor {\r\n  Primary = 'primary',\r\n  Success = 'success',\r\n  Info = 'info',\r\n  Warning = 'warning',\r\n  Danger = 'danger',\r\n}\r\n\r\nexport enum PrettyCheckboxAnimation {\r\n  Smooth = 'smooth',\r\n  Jelly = 'jelly',\r\n  Tada = 'tada',\r\n  Rotate = 'rotate',\r\n  Pulse = 'pulse',\r\n}\r\n\r\nexport interface PrettyCheckBoxChange {\r\n  checked: boolean;\r\n  value: string;\r\n  event: Event;\r\n}\r\n\r\nexport interface PrettyRadioChange {\r\n  checked: boolean;\r\n  value: string;\r\n  event: Event;\r\n}\r\n","// tslint:disable:use-host-property-decorator\r\n\r\nimport { Component, Input, ElementRef, Renderer2, SimpleChanges, AfterViewInit, ChangeDetectionStrategy, Attribute } from '@angular/core';\r\nimport { DEFAULT_PREFIX, DEFAULT_OUTLINE_PREFIX } from '../model/params';\r\nimport { PrettyCheckboxColor } from '../model/interfaces';\r\nimport { getColorClassName } from '../utility';\r\n\r\n@Component({\r\n  selector: 'ngx-p-hover:not([will-change]), p-hover:not([will-change])',\r\n  template: `\r\n    <ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\r\n    <label><ng-content></ng-content></label>\r\n  `,\r\n  host: {\r\n    class: `state ${DEFAULT_PREFIX}is-hover`\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxPrettyHoverComponent implements AfterViewInit {\r\n\r\n  constructor(\r\n    private el: ElementRef,\r\n    private renderer: Renderer2,\r\n    @Attribute('outline') private _outline = false,\r\n    @Attribute('color')   private _color: PrettyCheckboxColor,\r\n  ) { }\r\n\r\n  ngAfterViewInit() {\r\n    if (this._color) {\r\n      this.renderer.addClass(this.el.nativeElement,\r\n        `${DEFAULT_PREFIX}${this._color}${this._outline ? DEFAULT_OUTLINE_PREFIX : ''}`\r\n      );\r\n    }\r\n  }\r\n\r\n\r\n}\r\n","import { Directive, ElementRef } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[pIcon], [p-icon]'\r\n})\r\nexport class NgxPrettyIconDirective {\r\n\r\n  constructor(private elemRef: ElementRef) {\r\n    this.elemRef.nativeElement.classList.add('icon');\r\n  }\r\n\r\n}\r\n","import { Directive, ElementRef } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[pImage], [p-image]'\r\n})\r\nexport class NgxPrettyImageDirective {\r\n\r\n  constructor(private elemRef: ElementRef) {\r\n    console.log('TCL: NgxPrettyImageDirective -> constructor -> elemRef', elemRef);\r\n    this.elemRef.nativeElement.classList.add('image');\r\n  }\r\n\r\n}\r\n","// tslint:disable:use-host-property-decorator\r\n\r\nimport { Component, Input, ElementRef, Renderer2, AfterViewInit, ChangeDetectionStrategy, Attribute } from '@angular/core';\r\nimport { DEFAULT_PREFIX, DEFAULT_OUTLINE_PREFIX } from '../model/params';\r\nimport { PrettyCheckboxColor } from '../model/interfaces';\r\n\r\n@Component({\r\n  selector: 'ngx-p-indeterminate:not([will-change]), p-indeterminate:not([will-change])',\r\n  template: `\r\n    <ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\r\n    <label><ng-content></ng-content></label>\r\n  `,\r\n  host: {\r\n    class: `state ${DEFAULT_PREFIX}is-indeterminate`\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxPrettyIndeterminateComponent implements AfterViewInit {\r\n\r\n  constructor(\r\n    private el: ElementRef,\r\n    private renderer: Renderer2,\r\n    @Attribute('outline') private _outline = false,\r\n    @Attribute('color')   private _color: PrettyCheckboxColor,\r\n  ) { }\r\n\r\n  ngAfterViewInit() {\r\n    if (this._color) {\r\n      this.renderer.addClass(this.el.nativeElement,\r\n        `${DEFAULT_PREFIX}${this._color}${this._outline ? DEFAULT_OUTLINE_PREFIX : ''}`\r\n      );\r\n    }\r\n  }\r\n\r\n\r\n}\r\n","import { Directive, AfterViewInit, ElementRef } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[pSvg], [p-svg]'\r\n})\r\nexport class NgxPrettySvgDirective implements AfterViewInit {\r\n\r\n  constructor(private elemRef: ElementRef) { }\r\n\r\n  ngAfterViewInit() {\r\n    this.elemRef.nativeElement.classList.add('svg');\r\n  }\r\n\r\n}\r\n","// tslint:disable:use-host-property-decorator\r\n\r\nimport { Input, ElementRef, Component, AfterViewInit, Renderer2, ChangeDetectionStrategy, Attribute } from '@angular/core';\r\nimport { PrettyCheckboxColor, PrettyCheckBoxToggleType } from '../model/interfaces';\r\nimport { DEFAULT_PREFIX, DEFAULT_OUTLINE_PREFIX } from '../model/params';\r\nimport { getColorClassName } from '../utility';\r\n\r\n@Component({\r\n  selector: 'ngx-p-toggle:not([will-change]), p-toggle:not([will-change])',\r\n  template: `\r\n    <ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\r\n    <label><ng-content></ng-content></label>\r\n  `,\r\n  host: {\r\n    class: 'state'\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxPrettyToggleComponent implements AfterViewInit {\r\n\r\n  constructor(\r\n    private el: ElementRef,\r\n    private renderer: Renderer2,\r\n    @Attribute('outline') private _outline = false,\r\n    @Attribute('color')   private _color: PrettyCheckboxColor,\r\n    @Attribute('type')   private _type: PrettyCheckBoxToggleType,\r\n  ) { }\r\n\r\n  ngAfterViewInit() {\r\n    if (this._color) {\r\n      this.renderer.addClass(this.el.nativeElement,\r\n        `${DEFAULT_PREFIX}${this._color}${this._outline ? DEFAULT_OUTLINE_PREFIX : ''}`\r\n      );\r\n    }\r\n\r\n    this.renderer.addClass(this.el.nativeElement, `${DEFAULT_PREFIX}${this._type}`);\r\n  }\r\n\r\n}\r\n","import { PrettyCheckboxColor } from './model/interfaces';\r\nimport { DEFAULT_PREFIX, DEFAULT_OUTLINE_PREFIX } from './model/params';\r\n\r\nexport function getColorClassName(color: PrettyCheckboxColor, outline?: boolean) {\r\n  if (!color) { return null; }\r\n  return DEFAULT_PREFIX + color + (outline ? DEFAULT_OUTLINE_PREFIX : '');\r\n}\r\n\r\nexport function strToBoolean(str?: string | boolean): boolean {\r\n  if (typeof str === 'boolean') {\r\n    return str;\r\n  }\r\n\r\n  const regex = /^\\s*(true|1|on|enable)\\s*$/i;\r\n  return regex.test(str);\r\n}\r\n","// tslint:disable:use-host-property-decorator\r\n\r\nimport { Component, Input, ElementRef, Renderer2, SimpleChanges, OnChanges, ChangeDetectionStrategy } from '@angular/core';\r\nimport { DEFAULT_PREFIX } from '../model/params';\r\nimport { PrettyCheckboxColor } from '../model/interfaces';\r\nimport { getColorClassName } from '../utility';\r\n\r\n@Component({\r\n  selector: 'ngx-p-hover[will-change], p-hover[will-change]',\r\n  template: `\r\n    <ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\r\n    <label><ng-content></ng-content></label>\r\n  `,\r\n  host: {\r\n    class: `state ${DEFAULT_PREFIX}is-hover`\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxPrettyHoverWillChangeComponent implements OnChanges {\r\n\r\n  @Input() color: PrettyCheckboxColor;\r\n  @Input() outline = false;\r\n\r\n  constructor(\r\n    private el: ElementRef,\r\n    private renderer: Renderer2\r\n  ) { }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.color || changes.outline) {\r\n\r\n      const oldClass =\r\n        getColorClassName(\r\n          changes.color ? changes.color.previousValue : this.color,\r\n          changes.outline ? changes.outline.previousValue : null\r\n        );\r\n\r\n      const newClass =\r\n        getColorClassName(\r\n          changes.color ? changes.color.currentValue : this.color,\r\n          changes.outline ? changes.outline.currentValue : null\r\n        );\r\n\r\n      this.renderer.removeClass(this.el.nativeElement, oldClass);\r\n      this.renderer.addClass(this.el.nativeElement, newClass);\r\n    }\r\n  }\r\n\r\n}\r\n","// tslint:disable:use-host-property-decorator\r\n\r\nimport { Component, Input, ElementRef, Renderer2, SimpleChanges, OnChanges, ChangeDetectionStrategy } from '@angular/core';\r\nimport { getColorClassName } from '../utility';\r\nimport { DEFAULT_PREFIX } from '../model/params';\r\nimport { PrettyCheckboxColor } from '../model/interfaces';\r\n\r\n@Component({\r\n  selector: 'ngx-p-indeterminate[will-change], p-indeterminate[will-change]',\r\n  template: `\r\n    <ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\r\n    <label><ng-content></ng-content></label>\r\n  `,\r\n  host: {\r\n    class: `state ${DEFAULT_PREFIX}is-indeterminate`\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxPrettyIndeterminateWillChangeComponent implements OnChanges {\r\n\r\n  @Input() color: PrettyCheckboxColor;\r\n  @Input() outline = false;\r\n\r\n  constructor(private el: ElementRef, private renderer: Renderer2) { }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.color || changes.outline) {\r\n\r\n      const oldClass =\r\n        getColorClassName(\r\n          changes.color ? changes.color.previousValue : this.color,\r\n          changes.outline ? changes.outline.previousValue : null\r\n        );\r\n\r\n      const newClass =\r\n        getColorClassName(\r\n          changes.color ? changes.color.currentValue : this.color,\r\n          changes.outline ? changes.outline.currentValue : null\r\n        );\r\n\r\n      this.renderer.removeClass(this.el.nativeElement, oldClass);\r\n      this.renderer.addClass(this.el.nativeElement, newClass);\r\n    }\r\n  }\r\n\r\n}\r\n","// tslint:disable:use-host-property-decorator\r\n\r\nimport { Input, ElementRef, Component, HostBinding, SimpleChanges, OnChanges, Renderer2, ChangeDetectionStrategy } from '@angular/core';\r\nimport { PrettyCheckboxColor, PrettyCheckBoxToggleType } from '../model/interfaces';\r\nimport { DEFAULT_PREFIX, DEFAULT_OUTLINE_PREFIX } from '../model/params';\r\nimport { getColorClassName } from '../utility';\r\n\r\n@Component({\r\n  selector: 'ngx-p-toggle[will-change], p-toggle[will-change]',\r\n  template: `\r\n    <ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\r\n    <label><ng-content></ng-content></label>\r\n  `,\r\n  host: {\r\n    class: 'state'\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxPrettyToggleWillChangeComponent implements OnChanges {\r\n\r\n  @Input() type: PrettyCheckBoxToggleType;\r\n\r\n  @HostBinding(`class.${DEFAULT_PREFIX}on`)\r\n  get isToggleOn() { return this.type === PrettyCheckBoxToggleType.On; }\r\n\r\n  @HostBinding(`class.${DEFAULT_PREFIX}off`)\r\n  get isToggleOff() { return this.type === PrettyCheckBoxToggleType.Off; }\r\n\r\n\r\n  @Input() color: PrettyCheckboxColor;\r\n  @Input() outline = false;\r\n\r\n  constructor(private el: ElementRef, private renderer: Renderer2) { }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.color || changes.outline) {\r\n\r\n      const oldClass =\r\n        getColorClassName(\r\n          changes.color ? changes.color.previousValue : this.color,\r\n          changes.outline ? changes.outline.previousValue : null\r\n        );\r\n\r\n      const newClass =\r\n        getColorClassName(\r\n          changes.color ? changes.color.currentValue : this.color,\r\n          changes.outline ? changes.outline.currentValue : null\r\n        );\r\n\r\n      this.renderer.removeClass(this.el.nativeElement, oldClass);\r\n      this.renderer.addClass(this.el.nativeElement, newClass);\r\n    }\r\n  }\r\n\r\n}\r\n","import {\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Input,\r\n  Output,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  Attribute,\r\n  AfterViewInit,\r\n  Renderer2,\r\n  ChangeDetectorRef\r\n  } from '@angular/core';\r\nimport { DEFAULT_OUTLINE_PREFIX, DEFAULT_PREFIX, DEFAULT_PRETTY_CLASS_NAME } from '../model/params';\r\nimport { NgxPrettyHoverComponent } from './ngx-pretty-hover.component';\r\nimport { NgxPrettyIconDirective } from '../directives/ngx-pretty-icon.directive';\r\nimport { NgxPrettyImageDirective } from '../directives/ngx-pretty-image.directive';\r\nimport { NgxPrettyIndeterminateComponent } from './ngx-pretty-Indeterminate.component';\r\nimport { NgxPrettySvgDirective } from '../directives/ngx-pretty-svg.directive';\r\nimport { NgxPrettyToggleComponent } from './ngx-pretty-toggle.component';\r\nimport {\r\n  PrettyCheckboxAnimation,\r\n  PrettyCheckBoxChange,\r\n  PrettyCheckboxColor,\r\n  PrettyCheckboxShape,\r\n  PrettyCheckboxStroke\r\n  } from '../model/interfaces';\r\nimport { NgxPrettyHoverWillChangeComponent } from './ngx-pretty-hover-will-change.component';\r\nimport { NgxPrettyIndeterminateWillChangeComponent } from './ngx-pretty-Indeterminate-will-change.component';\r\nimport { NgxPrettyToggleWillChangeComponent } from './ngx-pretty-toggle-will-change.component';\r\nimport { strToBoolean } from '../utility';\r\n// tslint:disable:use-host-property-decorator\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'ngx-pretty-checkbox:not([will-change]), p-checkbox:not([will-change])',\r\n  template: `\r\n    <input\r\n      #inputElem\r\n      type=\"checkbox\"\r\n      [value]=\"value\"\r\n      [checked]=\"checked\"\r\n      [disabled]=\"disabled\"\r\n      (change)=\"_onChange($event, inputElem.checked, inputElem.value)\"/>\r\n\r\n    <div #stateElem *ngIf=\"!_isToggle\" class=\"state\">\r\n\r\n      <ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\r\n      <label><ng-content></ng-content></label>\r\n\r\n    </div>\r\n\r\n    <ng-content select=\"ngx-p-indeterminate, p-indeterminate, ngx-p-hover, p-hover, ngx-p-toggle, p-toggle\"></ng-content>\r\n  `,\r\n  // changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    'class': DEFAULT_PRETTY_CLASS_NAME\r\n  },\r\n  exportAs: 'ngxPrettyCheckbox'\r\n})\r\nexport class NgxPrettyCheckboxComponent implements AfterViewInit {\r\n\r\n  public readonly _prefix = DEFAULT_PREFIX;\r\n  public readonly _outlinePrefix = DEFAULT_OUTLINE_PREFIX;\r\n\r\n\r\n  @Input() checked = false;\r\n  @Input() disabled = false;\r\n  @Input() value;\r\n\r\n\r\n  @HostBinding(`class.${DEFAULT_PREFIX}locked`)\r\n  @Input() lock = false;\r\n\r\n\r\n  @ViewChild('inputElem', { static: true }) private _inputElem: ElementRef;\r\n  @ViewChild('stateElem', { static: false }) private _stateElem: ElementRef;\r\n\r\n  @Output() change = new EventEmitter<PrettyCheckBoxChange>();\r\n\r\n\r\n  @ContentChild(NgxPrettyIconDirective, {static: false}) private _iconDir: NgxPrettyIconDirective;\r\n  @ContentChild(NgxPrettySvgDirective, {static: false}) private _svgDir: NgxPrettySvgDirective;\r\n  @ContentChild(NgxPrettyImageDirective, {static: false}) private _imgDir: NgxPrettyImageDirective;\r\n\r\n  @ContentChild(NgxPrettyHoverComponent, {static: false}) private _hoverDir: NgxPrettyHoverComponent;\r\n  @ContentChild(NgxPrettyHoverWillChangeComponent, {static: false}) private _hoverWillChangeDir: NgxPrettyHoverWillChangeComponent;\r\n\r\n  @ContentChild(NgxPrettyIndeterminateComponent, {static: false}) private _indeterminateDir: NgxPrettyIndeterminateComponent;\r\n  @ContentChild(NgxPrettyIndeterminateWillChangeComponent, {static: false}) private _indeterminateWillChangeDir: NgxPrettyIndeterminateWillChangeComponent;\r\n\r\n  @ContentChildren(NgxPrettyToggleComponent) public _toggleComps: QueryList<NgxPrettyToggleComponent>;\r\n  @ContentChildren(NgxPrettyToggleWillChangeComponent) public _toggleWillChangeComps: QueryList<NgxPrettyToggleWillChangeComponent>;\r\n\r\n  constructor (\r\n    private renderer: Renderer2,\r\n    private el: ElementRef,\r\n    private cd: ChangeDetectorRef,\r\n\r\n    @Attribute('stroke')      private _stroke: PrettyCheckboxStroke,\r\n    @Attribute('shape')       private _shape: PrettyCheckboxShape,\r\n    @Attribute('animation')   private _animation: PrettyCheckboxAnimation,\r\n    @Attribute('isSwitch')    private _isSwitch = false,\r\n    @Attribute('bigger')      private _bigger = false,\r\n    @Attribute('enableFocus') private _enableFocus = false,\r\n    @Attribute('plain')       private _plain = false,\r\n\r\n    @Attribute('outline') private _outline = false,\r\n    @Attribute('color')   private _color: PrettyCheckboxColor,\r\n  ) {\r\n      this._isSwitch    = strToBoolean(this._isSwitch);\r\n      this._bigger      = strToBoolean(this._bigger);\r\n      this._enableFocus = strToBoolean(this._enableFocus);\r\n      this._plain       = strToBoolean(this._plain);\r\n      this._outline     = strToBoolean(this._outline);\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    const el = this.el.nativeElement;\r\n\r\n    if (this._isSwitch)    { this.renderer.addClass(el, `${DEFAULT_PREFIX}switch`); }\r\n    if (this._bigger)      { this.renderer.addClass(el, `${DEFAULT_PREFIX}bigger`); }\r\n    if (this._enableFocus) { this.renderer.addClass(el, `${DEFAULT_PREFIX}has-focus`); }\r\n    if (this._plain)       { this.renderer.addClass(el, `${DEFAULT_PREFIX}plain`); }\r\n\r\n    if (this._stroke)     { this.renderer.addClass(el, `${DEFAULT_PREFIX}${this._stroke}`); }\r\n    if (this._shape)      { this.renderer.addClass(el, `${DEFAULT_PREFIX}${this._shape}`); }\r\n    if (this._animation)  { this.renderer.addClass(el, `${DEFAULT_PREFIX}${this._animation}`); }\r\n\r\n    if (this._iconDir)          { this.renderer.addClass(el, `${DEFAULT_PREFIX}icon`); }\r\n    if (this._svgDir)           { this.renderer.addClass(el, `${DEFAULT_PREFIX}svg`); }\r\n    if (this._imgDir)           { this.renderer.addClass(el, `${DEFAULT_PREFIX}image`); }\r\n\r\n    if (this._hoverDir || this._hoverWillChangeDir) {\r\n      this.renderer.addClass(el, `${DEFAULT_PREFIX}has-hover`);\r\n    }\r\n\r\n    if (this._indeterminateDir || this._indeterminateWillChangeDir) {\r\n      this.renderer.addClass(el, `${DEFAULT_PREFIX}has-indeterminate`);\r\n    }\r\n\r\n    if (this._isToggle) { this.renderer.addClass(el, `${DEFAULT_PREFIX}toggle`); }\r\n\r\n    if (!this._isSwitch && !this._iconDir && !this._svgDir && !this._imgDir) {\r\n      this.renderer.addClass(el, `${DEFAULT_PREFIX}default`);\r\n    }\r\n\r\n    // STATE ELEM\r\n    if (this._color && !this._isToggle) {\r\n      this.renderer.addClass(this._stateElem.nativeElement,\r\n        `${DEFAULT_PREFIX}${this._color}${this._outline ? DEFAULT_OUTLINE_PREFIX : ''}`\r\n      );\r\n    }\r\n\r\n  }\r\n\r\n\r\n  // ---------- PRIVATE METHODS ---------\r\n  public _onChange(event: Event, checked: boolean, value: string) {\r\n    // I stop propagation on the change event.\r\n    // Otherwise the change event, from the input element, will bubble up and\r\n    event.stopPropagation();\r\n    this.checked = checked;\r\n    this.change.emit({ value, checked, event });\r\n  }\r\n\r\n  public get _isToggle() { return this._toggleComps.length === 2 || this._toggleWillChangeComps.length === 2; }\r\n\r\n  // ---------- PUBLIC METHODS ---------\r\n  public setIndeterminate(value = true) {\r\n    this._inputElem.nativeElement.indeterminate = value;\r\n  }\r\n\r\n  public forceCheck(check: boolean) {\r\n    this.checked = check;\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n}\r\n","import {\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Input,\r\n  Output,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef\r\n  } from '@angular/core';\r\nimport { DEFAULT_OUTLINE_PREFIX, DEFAULT_PREFIX, DEFAULT_PRETTY_CLASS_NAME } from '../model/params';\r\nimport { NgxPrettyHoverComponent } from './ngx-pretty-hover.component';\r\nimport { NgxPrettyIconDirective } from '../directives/ngx-pretty-icon.directive';\r\nimport { NgxPrettyImageDirective } from '../directives/ngx-pretty-image.directive';\r\nimport { NgxPrettyIndeterminateComponent } from './ngx-pretty-Indeterminate.component';\r\nimport { NgxPrettySvgDirective } from '../directives/ngx-pretty-svg.directive';\r\nimport { NgxPrettyToggleComponent } from './ngx-pretty-toggle.component';\r\nimport {\r\n  PrettyCheckboxAnimation,\r\n  PrettyCheckBoxChange,\r\n  PrettyCheckboxColor,\r\n  PrettyCheckboxShape,\r\n  PrettyCheckboxStroke,\r\n  } from '../model/interfaces';\r\nimport { NgxPrettyHoverWillChangeComponent } from './ngx-pretty-hover-will-change.component';\r\nimport { NgxPrettyToggleWillChangeComponent } from './ngx-pretty-toggle-will-change.component';\r\nimport { NgxPrettyIndeterminateWillChangeComponent } from './ngx-pretty-Indeterminate-will-change.component';\r\n// tslint:disable:use-host-property-decorator\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'ngx-pretty-checkbox[will-change], p-checkbox[will-change]',\r\n  template: `\r\n    <input\r\n      #inputElem\r\n      type=\"checkbox\"\r\n      [value]=\"value\"\r\n      [checked]=\"checked\"\r\n      [disabled]=\"disabled\"\r\n      (change)=\"_onChange($event, inputElem.checked, inputElem.value)\"/>\r\n\r\n    <div *ngIf=\"!_isToggle\" class=\"state\"\r\n        [ngClass]=\"[ color ? _prefix + color + (outline ? _outlinePrefix : '') : '' ]\">\r\n\r\n        <ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\r\n        <label><ng-content></ng-content></label>\r\n    </div>\r\n\r\n    <ng-content select=\"ngx-p-indeterminate, p-indeterminate, ngx-p-hover, p-hover, ngx-p-toggle, p-toggle\"></ng-content>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    'class': DEFAULT_PRETTY_CLASS_NAME\r\n  },\r\n  exportAs: 'ngxPrettyCheckboxWillChange'\r\n})\r\nexport class NgxPrettyCheckboxWillChangeComponent {\r\n\r\n  constructor(private cd: ChangeDetectorRef) {}\r\n\r\n  public readonly _prefix = DEFAULT_PREFIX;\r\n  public readonly _outlinePrefix = DEFAULT_OUTLINE_PREFIX;\r\n\r\n  @ViewChild('inputElem', { static: true }) private _inputElem: ElementRef;\r\n  @Output() change = new EventEmitter<PrettyCheckBoxChange>();\r\n\r\n\r\n  // ---------- INPUTS ----------\r\n  @Input() stroke: PrettyCheckboxStroke;\r\n  @Input() shape: PrettyCheckboxShape;\r\n  @Input() animation: PrettyCheckboxAnimation;\r\n  @Input() color: PrettyCheckboxColor;\r\n  @Input() outline = false; // COLOR . Can be used as Solid ( p-primary ) or Outline ( p-primary-o ).\r\n\r\n  @Input() checked = false;\r\n  @Input() disabled = false;\r\n  @Input() value;\r\n\r\n\r\n  // ----- INPUTS AND BINDING ------\r\n  // SWITCH\r\n  @HostBinding(`class.${DEFAULT_PREFIX}switch`)\r\n  @Input() isSwitch = false;\r\n\r\n  //  LOCK\r\n  @HostBinding(`class.${DEFAULT_PREFIX}locked`)\r\n  @Input() lock = false;\r\n\r\n  //  BIGGER\r\n  @HostBinding(`class.${DEFAULT_PREFIX}bigger`)\r\n  @Input() bigger = false;\r\n\r\n  //  FOCUS\r\n  @HostBinding(`class.${DEFAULT_PREFIX}has-focus`)\r\n  @Input() enableFocus = false;\r\n\r\n  //  PLAIN\r\n  @HostBinding(`class.${DEFAULT_PREFIX}plain`)\r\n  @Input() plain = false; // To remove the border ( when checkbox is checked ) \r\n\r\n\r\n  // ---------- STROKE ----------\r\n  // Fill\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxStroke.Fill}`)\r\n  get _isFill() { return this.stroke === PrettyCheckboxStroke.Fill; }\r\n\r\n  // Slim\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxStroke.Slim}`)\r\n  get _isSlim() { return this.stroke === PrettyCheckboxStroke.Slim; }\r\n\r\n  // Thick\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxStroke.Thick}`)\r\n  get _isThick() { return this.stroke === PrettyCheckboxStroke.Thick; }\r\n\r\n\r\n  // ---------- SHAPE ----------\r\n  // Curve\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxShape.Curve}`)\r\n  get _isCurve() { return this.shape === PrettyCheckboxShape.Curve; }\r\n\r\n  // Round\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxShape.Round}`)\r\n  get _isRound() { return this.shape === PrettyCheckboxShape.Round; }\r\n\r\n\r\n  // ---------- ANIMATION ----------\r\n  // Smooth\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxAnimation.Smooth}`)\r\n  get _isSmooth() { return this.animation === PrettyCheckboxAnimation.Smooth; }\r\n\r\n  // Jelly\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxAnimation.Jelly}`)\r\n  get _isJelly() { return this.animation === PrettyCheckboxAnimation.Jelly; }\r\n\r\n  // Tada\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxAnimation.Tada}`)\r\n  get _isTada() { return this.animation === PrettyCheckboxAnimation.Tada; }\r\n\r\n  // Rotate\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxAnimation.Rotate}`)\r\n  get _isRotate() { return this.animation === PrettyCheckboxAnimation.Rotate; }\r\n\r\n  // Pulse\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxAnimation.Pulse}`)\r\n  get _isPulse() { return this.animation === PrettyCheckboxAnimation.Pulse; }\r\n\r\n\r\n  // ---------- BINDING ----------\r\n  // Toggle\r\n  @ContentChildren(NgxPrettyToggleComponent) _toggleComp: QueryList<NgxPrettyToggleComponent>;\r\n  @ContentChildren(NgxPrettyToggleWillChangeComponent) _toggleWillChangeComp: QueryList<NgxPrettyToggleWillChangeComponent>;\r\n\r\n  @HostBinding(`class.${DEFAULT_PREFIX}toggle`)\r\n  get _isToggle() { return this._toggleComp.length === 2 || this._toggleWillChangeComp.length === 2; }\r\n\r\n  // DEFAULT\r\n  @HostBinding(`class.${DEFAULT_PREFIX}default`)\r\n  get _isDefault() { return !this.isSwitch && !this._iconElem && !this._svgElem && !this._imageElem; }\r\n\r\n\r\n\r\n  // ----- CHILD SELECTOR AND BINDING -----\r\n  // ICON\r\n  @HostBinding(`class.${DEFAULT_PREFIX}icon`)\r\n  @ContentChild(NgxPrettyIconDirective, {static: false}) _iconElem: NgxPrettyIconDirective;\r\n\r\n  // SVG\r\n  @HostBinding(`class.${DEFAULT_PREFIX}svg`)\r\n  @ContentChild(NgxPrettySvgDirective, {static: false}) _svgElem: NgxPrettySvgDirective;\r\n\r\n  // IMAGE\r\n  @HostBinding(`class.${DEFAULT_PREFIX}image`)\r\n  @ContentChild(NgxPrettyImageDirective, {static: false}) _imageElem: NgxPrettyImageDirective;\r\n\r\n  // HOVER\r\n  @ContentChild(NgxPrettyHoverWillChangeComponent, {static: false}) _hoverWillChangeDir: NgxPrettyHoverWillChangeComponent;\r\n  @ContentChild(NgxPrettyHoverComponent, {static: false}) _hoverComp: NgxPrettyHoverComponent;\r\n\r\n  @HostBinding(`class.${DEFAULT_PREFIX}has-hover`)\r\n  get _isHover() { return this._hoverComp || this._hoverWillChangeDir; }\r\n\r\n  // Indeterminate\r\n  @ContentChild(NgxPrettyIndeterminateComponent, {static: false}) _indeterminateComp: NgxPrettyIndeterminateComponent;\r\n  @ContentChild(NgxPrettyIndeterminateWillChangeComponent, {static: false}) _indeterminateWillChangeComp: NgxPrettyIndeterminateWillChangeComponent;\r\n\r\n  @HostBinding(`class.${DEFAULT_PREFIX}has-indeterminate`)\r\n  get _isIndeterminate() { return this._indeterminateComp || this._indeterminateWillChangeComp; }\r\n\r\n\r\n  // ---------- PRIVATE METHODS ---------\r\n  public _onChange(event: Event, checked: boolean, value: string) {\r\n    // I stop propagation on the change event.\r\n    // Otherwise the change event, from the input element, will bubble up and\r\n    event.stopPropagation();\r\n    this.checked = checked;\r\n    this.change.emit({ value, checked, event });\r\n  }\r\n\r\n  // ---------- PUBLIC METHODS ---------\r\n  public setIndeterminate(value = true) {\r\n    this._inputElem.nativeElement.indeterminate = value;\r\n  }\r\n\r\n  public forceCheck(check: boolean) {\r\n    this.checked = check;\r\n    this.cd.markForCheck();\r\n  }\r\n}\r\n\r\n\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NgxPrettyRadioService {\r\n\r\n  public name: string;\r\n\r\n  constructor() { }\r\n}\r\n","import { Directive, Output, EventEmitter } from '@angular/core';\r\nimport { NgxPrettyRadioService } from '../ngx-pretty-checkbox.service';\r\nimport { GROUP_NAME } from '../model/params';\r\nimport { PrettyRadioChange } from '../model/interfaces';\r\n\r\nlet nextId = 1;\r\n\r\n@Directive({\r\n  selector: 'ngx-pretty-radio-group, p-radio-group',\r\n  providers: [NgxPrettyRadioService],\r\n  exportAs: 'ngxRadioGroup'\r\n})\r\nexport class NgxPrettyRadioGroupDirective {\r\n\r\n  public name = GROUP_NAME + nextId++;\r\n\r\n  @Output() change = new EventEmitter<PrettyRadioChange>();\r\n\r\n  constructor() {}\r\n\r\n  _emitChange(event: PrettyRadioChange) {\r\n    this.change.emit(event);\r\n  }\r\n\r\n}\r\n","import {\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Input,\r\n  Output,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  Attribute,\r\n  AfterViewInit,\r\n  Renderer2,\r\n  Optional,\r\n  OnInit\r\n  } from '@angular/core';\r\nimport { DEFAULT_OUTLINE_PREFIX, DEFAULT_PREFIX, DEFAULT_PRETTY_CLASS_NAME } from '../model/params';\r\nimport { NgxPrettyHoverComponent } from './ngx-pretty-hover.component';\r\nimport { NgxPrettyIconDirective } from '../directives/ngx-pretty-icon.directive';\r\nimport { NgxPrettyImageDirective } from '../directives/ngx-pretty-image.directive';\r\nimport { NgxPrettySvgDirective } from '../directives/ngx-pretty-svg.directive';\r\nimport { NgxPrettyToggleComponent } from './ngx-pretty-toggle.component';\r\nimport {\r\n  PrettyCheckboxAnimation,\r\n  PrettyCheckboxColor,\r\n  PrettyCheckboxShape,\r\n  PrettyCheckboxStroke,\r\n  PrettyRadioChange\r\n  } from '../model/interfaces';\r\nimport { NgxPrettyHoverWillChangeComponent } from './ngx-pretty-hover-will-change.component';\r\nimport { NgxPrettyToggleWillChangeComponent } from './ngx-pretty-toggle-will-change.component';\r\nimport { NgxPrettyRadioGroupDirective } from './ngx-pretty-radio-group.component';\r\nimport { strToBoolean } from '../utility';\r\n// tslint:disable:use-host-property-decorator\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'ngx-pretty-radio:not([will-change]), p-radio:not([will-change])',\r\n  template: `\r\n    <input\r\n      #inputElem\r\n      type=\"radio\"\r\n      [name]=\"_name\"\r\n      [value]=\"value\"\r\n      [checked]=\"checked\"\r\n      [disabled]=\"disabled\"\r\n      (change)=\"_onChange($event, inputElem.checked, inputElem.value)\"/>\r\n\r\n    <div #stateElem *ngIf=\"!_isToggle\" class=\"state\">\r\n\r\n      <ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\r\n      <label><ng-content></ng-content></label>\r\n\r\n    </div>\r\n\r\n    <ng-content select=\"ngx-p-hover, p-hover, ngx-p-toggle, p-toggle\"></ng-content>\r\n  `,\r\n  // changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    'class': DEFAULT_PRETTY_CLASS_NAME\r\n  },\r\n  exportAs: 'ngxPrettyRadio'\r\n})\r\nexport class NgxPrettyRadioComponent implements AfterViewInit {\r\n\r\n  public readonly _prefix = DEFAULT_PREFIX;\r\n  public readonly _outlinePrefix = DEFAULT_OUTLINE_PREFIX;\r\n\r\n\r\n  @Input() checked = false;\r\n  @Input() disabled = false;\r\n  @Input() value;\r\n\r\n  @HostBinding(`class.${DEFAULT_PREFIX}locked`)\r\n  @Input() lock = false;\r\n\r\n\r\n  @ViewChild('inputElem', { static: true }) private _inputElem: ElementRef;\r\n  @ViewChild('stateElem', { static: false }) private _stateElem: ElementRef;\r\n\r\n  @Output() change = new EventEmitter<PrettyRadioChange>();\r\n\r\n\r\n  @ContentChild(NgxPrettyIconDirective, {static: false}) private _iconDir: NgxPrettyIconDirective;\r\n  @ContentChild(NgxPrettySvgDirective, {static: false}) private _svgDir: NgxPrettySvgDirective;\r\n  @ContentChild(NgxPrettyImageDirective, {static: false}) private _imgDir: NgxPrettyImageDirective;\r\n\r\n  @ContentChild(NgxPrettyHoverComponent, {static: false}) private _hoverDir: NgxPrettyHoverComponent;\r\n  @ContentChild(NgxPrettyHoverWillChangeComponent, {static: false}) private _hoverWillChangeDir: NgxPrettyHoverWillChangeComponent;\r\n\r\n  @ContentChildren(NgxPrettyToggleComponent) public _toggleComps: QueryList<NgxPrettyToggleComponent>;\r\n  @ContentChildren(NgxPrettyToggleWillChangeComponent) public _toggleWillChangeComps: QueryList<NgxPrettyToggleWillChangeComponent>;\r\n\r\n  constructor (\r\n    private renderer: Renderer2,\r\n    private el: ElementRef,\r\n    @Optional() private radioGroup: NgxPrettyRadioGroupDirective,\r\n\r\n    @Attribute('stroke')      private _stroke: PrettyCheckboxStroke,\r\n    @Attribute('shape')       private _shape: PrettyCheckboxShape,\r\n    @Attribute('animation')   private _animation: PrettyCheckboxAnimation,\r\n    @Attribute('isSwitch')    private _isSwitch = false,\r\n    @Attribute('bigger')      private _bigger = false,\r\n    @Attribute('enableFocus') private _enableFocus = false,\r\n    @Attribute('plain')       private _plain = false,\r\n\r\n    @Attribute('outline') private _outline = false,\r\n    @Attribute('color')   private _color: PrettyCheckboxColor,\r\n    @Attribute('name')   public _name: string,\r\n    ) {\r\n      if (!this._name && this.radioGroup) {\r\n        this._name = this.radioGroup.name;\r\n      }\r\n\r\n      this._isSwitch    = strToBoolean(this._isSwitch);\r\n      this._bigger      = strToBoolean(this._bigger);\r\n      this._enableFocus = strToBoolean(this._enableFocus);\r\n      this._plain       = strToBoolean(this._plain);\r\n      this._outline     = strToBoolean(this._outline);\r\n    }\r\n\r\n\r\n  ngAfterViewInit(): void {\r\n    const el = this.el.nativeElement;\r\n\r\n    if (this._isSwitch)    { this.renderer.addClass(el, `${DEFAULT_PREFIX}switch`); }\r\n    if (this._bigger)      { this.renderer.addClass(el, `${DEFAULT_PREFIX}bigger`); }\r\n    if (this._enableFocus) { this.renderer.addClass(el, `${DEFAULT_PREFIX}has-focus`); }\r\n    if (this._plain)       { this.renderer.addClass(el, `${DEFAULT_PREFIX}plain`); }\r\n\r\n    if (this._stroke)     { this.renderer.addClass(el, `${DEFAULT_PREFIX}${this._stroke}`); }\r\n    if (this._shape)      { this.renderer.addClass(el, `${DEFAULT_PREFIX}${this._shape}`); }\r\n    if (this._animation)  { this.renderer.addClass(el, `${DEFAULT_PREFIX}${this._animation}`); }\r\n\r\n    if (this._iconDir)          { this.renderer.addClass(el, `${DEFAULT_PREFIX}icon`); }\r\n    if (this._svgDir)           { this.renderer.addClass(el, `${DEFAULT_PREFIX}svg`); }\r\n    if (this._imgDir)           { this.renderer.addClass(el, `${DEFAULT_PREFIX}image`); }\r\n\r\n    if (this._hoverDir || this._hoverWillChangeDir) {\r\n      this.renderer.addClass(el, `${DEFAULT_PREFIX}has-hover`);\r\n    }\r\n\r\n    if (this._isToggle) { this.renderer.addClass(el, `${DEFAULT_PREFIX}toggle`); }\r\n\r\n    if (!this._isSwitch && !this._iconDir && !this._svgDir && !this._imgDir) {\r\n      this.renderer.addClass(el, `${DEFAULT_PREFIX}default`);\r\n    }\r\n\r\n    // STATE ELEM\r\n    if (this._color && !this._isToggle) {\r\n      this.renderer.addClass(this._stateElem.nativeElement,\r\n        `${DEFAULT_PREFIX}${this._color}${this._outline ? DEFAULT_OUTLINE_PREFIX : ''}`\r\n      );\r\n    }\r\n\r\n  }\r\n\r\n\r\n  // ---------- METHODS ---------\r\n  public _onChange(event: Event, checked: boolean, value: string) {\r\n    // I stop propagation on the change event.\r\n    // Otherwise the change event, from the input element, will bubble up and\r\n    event.stopPropagation();\r\n    this.change.emit({ value, checked, event });\r\n\r\n    if (this.radioGroup) {\r\n      this.radioGroup._emitChange({ value, checked, event });\r\n    }\r\n  }\r\n\r\n  public get _isToggle() { return this._toggleComps.length === 2 || this._toggleWillChangeComps.length === 2; }\r\n}\r\n","import {\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Input,\r\n  Output,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  Optional\r\n  } from '@angular/core';\r\nimport { DEFAULT_OUTLINE_PREFIX, DEFAULT_PREFIX, DEFAULT_PRETTY_CLASS_NAME } from '../model/params';\r\nimport { NgxPrettyHoverComponent } from './ngx-pretty-hover.component';\r\nimport { NgxPrettyIconDirective } from '../directives/ngx-pretty-icon.directive';\r\nimport { NgxPrettyImageDirective } from '../directives/ngx-pretty-image.directive';\r\nimport { NgxPrettyIndeterminateComponent } from './ngx-pretty-Indeterminate.component';\r\nimport { NgxPrettySvgDirective } from '../directives/ngx-pretty-svg.directive';\r\nimport { NgxPrettyToggleComponent } from './ngx-pretty-toggle.component';\r\nimport {\r\n  PrettyCheckboxAnimation,\r\n  PrettyCheckBoxChange,\r\n  PrettyCheckboxColor,\r\n  PrettyCheckboxShape,\r\n  PrettyCheckboxStroke,\r\n  } from '../model/interfaces';\r\nimport { NgxPrettyHoverWillChangeComponent } from './ngx-pretty-hover-will-change.component';\r\nimport { NgxPrettyToggleWillChangeComponent } from './ngx-pretty-toggle-will-change.component';\r\nimport { NgxPrettyIndeterminateWillChangeComponent } from './ngx-pretty-Indeterminate-will-change.component';\r\nimport { NgxPrettyRadioGroupDirective } from './ngx-pretty-radio-group.component';\r\n// tslint:disable:use-host-property-decorator\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'ngx-pretty-radio[will-change], p-radio[will-change]',\r\n  template: `\r\n    <input\r\n      #inputElem\r\n      type=\"radio\"\r\n      [name]=\"name || radioGroupName\"\r\n      [value]=\"value\"\r\n      [checked]=\"checked\"\r\n      [disabled]=\"disabled\"\r\n      (change)=\"_onChange($event, inputElem.checked, inputElem.value)\"/>\r\n\r\n    <div *ngIf=\"!_isToggle\" class=\"state\"\r\n        [ngClass]=\"[ color ? _prefix + color + (outline ? _outlinePrefix : '') : '' ]\">\r\n\r\n        <ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\r\n        <label><ng-content></ng-content></label>\r\n    </div>\r\n\r\n    <ng-content select=\"ngx-p-indeterminate, p-indeterminate, ngx-p-hover, p-hover, ngx-p-toggle, p-toggle\"></ng-content>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    'class': DEFAULT_PRETTY_CLASS_NAME\r\n  },\r\n  exportAs: 'ngxPrettyRadio'\r\n})\r\nexport class NgxPrettyRadioWillChangeComponent {\r\n\r\n  constructor(@Optional() private radioGroup: NgxPrettyRadioGroupDirective) {\r\n    if (radioGroup) {\r\n      this.radioGroupName = radioGroup.name;\r\n    }\r\n  }\r\n\r\n  public readonly _prefix = DEFAULT_PREFIX;\r\n  public readonly _outlinePrefix = DEFAULT_OUTLINE_PREFIX;\r\n\r\n  @ViewChild('inputElem', { static: true }) private _inputElem: ElementRef;\r\n  @Output() change = new EventEmitter<PrettyCheckBoxChange>();\r\n\r\n\r\n  // ---------- INPUTS ----------\r\n  @Input() stroke: PrettyCheckboxStroke;\r\n  @Input() shape: PrettyCheckboxShape;\r\n  @Input() animation: PrettyCheckboxAnimation;\r\n  @Input() color: PrettyCheckboxColor;\r\n  @Input() outline = false; // COLOR . Can be used as Solid ( p-primary ) or Outline ( p-primary-o ).\r\n\r\n  @Input() checked = false;\r\n  @Input() disabled = false;\r\n  @Input() value;\r\n\r\n  public radioGroupName: string;\r\n  @Input() name: string;\r\n\r\n\r\n  // ----- INPUTS AND BINDING ------\r\n  // SWITCH\r\n  @HostBinding(`class.${DEFAULT_PREFIX}switch`)\r\n  @Input() isSwitch = false;\r\n\r\n  //  LOCK\r\n  @HostBinding(`class.${DEFAULT_PREFIX}locked`)\r\n  @Input() lock = false;\r\n\r\n  //  BIGGER\r\n  @HostBinding(`class.${DEFAULT_PREFIX}bigger`)\r\n  @Input() bigger = false;\r\n\r\n  //  FOCUS\r\n  @HostBinding(`class.${DEFAULT_PREFIX}has-focus`)\r\n  @Input() enableFocus = false;\r\n\r\n  //  PLAIN\r\n  @HostBinding(`class.${DEFAULT_PREFIX}plain`)\r\n  @Input() plain = false; // To remove the border ( when checkbox is checked )\r\n\r\n\r\n  // ---------- STROKE ----------\r\n  // Fill\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxStroke.Fill}`)\r\n  get _isFill() { return this.stroke === PrettyCheckboxStroke.Fill; }\r\n\r\n  // Slim\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxStroke.Slim}`)\r\n  get _isSlim() { return this.stroke === PrettyCheckboxStroke.Slim; }\r\n\r\n  // Thick\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxStroke.Thick}`)\r\n  get _isThick() { return this.stroke === PrettyCheckboxStroke.Thick; }\r\n\r\n\r\n  // ---------- SHAPE ----------\r\n  // Curve\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxShape.Curve}`)\r\n  get _isCurve() { return this.shape === PrettyCheckboxShape.Curve; }\r\n\r\n  // Round\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxShape.Round}`)\r\n  get _isRound() { return this.shape === PrettyCheckboxShape.Round; }\r\n\r\n\r\n  // ---------- ANIMATION ----------\r\n  // Smooth\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxAnimation.Smooth}`)\r\n  get _isSmooth() { return this.animation === PrettyCheckboxAnimation.Smooth; }\r\n\r\n  // Jelly\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxAnimation.Jelly}`)\r\n  get _isJelly() { return this.animation === PrettyCheckboxAnimation.Jelly; }\r\n\r\n  // Tada\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxAnimation.Tada}`)\r\n  get _isTada() { return this.animation === PrettyCheckboxAnimation.Tada; }\r\n\r\n  // Rotate\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxAnimation.Rotate}`)\r\n  get _isRotate() { return this.animation === PrettyCheckboxAnimation.Rotate; }\r\n\r\n  // Pulse\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxAnimation.Pulse}`)\r\n  get _isPulse() { return this.animation === PrettyCheckboxAnimation.Pulse; }\r\n\r\n\r\n  // ---------- BINDING ----------\r\n  // Toggle\r\n  @ContentChildren(NgxPrettyToggleComponent) _toggleComp: QueryList<NgxPrettyToggleComponent>;\r\n  @ContentChildren(NgxPrettyToggleWillChangeComponent) _toggleWillChangeComp: QueryList<NgxPrettyToggleWillChangeComponent>;\r\n\r\n  @HostBinding(`class.${DEFAULT_PREFIX}toggle`)\r\n  get _isToggle() { return this._toggleComp.length === 2 || this._toggleWillChangeComp.length === 2; }\r\n\r\n  // DEFAULT\r\n  @HostBinding(`class.${DEFAULT_PREFIX}default`)\r\n  get _isDefault() { return !this.isSwitch && !this._iconElem && !this._svgElem && !this._imageElem; }\r\n\r\n\r\n\r\n  // ----- CHILD SELECTOR AND BINDING -----\r\n  // ICON\r\n  @HostBinding(`class.${DEFAULT_PREFIX}icon`)\r\n  @ContentChild(NgxPrettyIconDirective, {static: false}) _iconElem: NgxPrettyIconDirective;\r\n\r\n  // SVG\r\n  @HostBinding(`class.${DEFAULT_PREFIX}svg`)\r\n  @ContentChild(NgxPrettySvgDirective, {static: false}) _svgElem: NgxPrettySvgDirective;\r\n\r\n  // IMAGE\r\n  @HostBinding(`class.${DEFAULT_PREFIX}image`)\r\n  @ContentChild(NgxPrettyImageDirective, {static: false}) _imageElem: NgxPrettyImageDirective;\r\n\r\n  // HOVER\r\n  @ContentChild(NgxPrettyHoverWillChangeComponent, {static: false}) _hoverWillChangeDir: NgxPrettyHoverWillChangeComponent;\r\n  @ContentChild(NgxPrettyHoverComponent, {static: false}) _hoverComp: NgxPrettyHoverComponent;\r\n\r\n  @HostBinding(`class.${DEFAULT_PREFIX}has-hover`)\r\n  get _isHover() { return this._hoverComp || this._hoverWillChangeDir; }\r\n\r\n\r\n  // ---------- METHODS ---------\r\n  public _onChange(event: Event, checked: boolean, value: string) {\r\n    // I stop propagation on the change event.\r\n    // Otherwise the change event, from the input element, will bubble up and\r\n    event.stopPropagation();\r\n    this.change.emit({ value, checked, event });\r\n\r\n    if (this.radioGroup) {\r\n      this.radioGroup._emitChange({ value, checked, event });\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { NgxPrettyCheckboxComponent } from './components/ngx-pretty-checkbox.component';\r\nimport { NgxPrettyIconDirective } from './directives/ngx-pretty-icon.directive';\r\nimport { NgxPrettySvgDirective } from './directives/ngx-pretty-svg.directive';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { NgxPrettyImageDirective } from './directives/ngx-pretty-image.directive';\r\nimport { NgxPrettyHoverComponent } from './components/ngx-pretty-hover.component';\r\nimport { NgxPrettyIndeterminateComponent } from './components/ngx-pretty-Indeterminate.component';\r\nimport { NgxPrettyToggleComponent } from './components/ngx-pretty-toggle.component';\r\nimport { NgxPrettyHoverWillChangeComponent } from './components/ngx-pretty-hover-will-change.component';\r\nimport { NgxPrettyCheckboxWillChangeComponent } from './components/ngx-pretty-checkbox-will-change.component';\r\nimport { NgxPrettyIndeterminateWillChangeComponent } from './components/ngx-pretty-Indeterminate-will-change.component';\r\nimport { NgxPrettyToggleWillChangeComponent } from './components/ngx-pretty-toggle-will-change.component';\r\nimport { NgxPrettyRadioGroupDirective } from './components/ngx-pretty-radio-group.component';\r\nimport { NgxPrettyRadioComponent } from './components/ngx-pretty-radio.component';\r\nimport { NgxPrettyRadioWillChangeComponent } from './components/ngx-pretty-radio-will-change.component';\r\n\r\nconst DECLARATIONS = [\r\n  NgxPrettyCheckboxComponent,\r\n  NgxPrettyCheckboxWillChangeComponent,\r\n\r\n  NgxPrettyIconDirective,\r\n  NgxPrettySvgDirective,\r\n  NgxPrettyImageDirective,\r\n\r\n  NgxPrettyToggleComponent,\r\n  NgxPrettyToggleWillChangeComponent,\r\n\r\n  NgxPrettyHoverComponent,\r\n  NgxPrettyHoverWillChangeComponent,\r\n\r\n  NgxPrettyIndeterminateComponent,\r\n  NgxPrettyIndeterminateWillChangeComponent,\r\n\r\n  NgxPrettyRadioGroupDirective,\r\n  NgxPrettyRadioComponent,\r\n  NgxPrettyRadioWillChangeComponent\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule\r\n  ],\r\n  declarations: [ DECLARATIONS ],\r\n  exports: [ DECLARATIONS ]\r\n})\r\nexport class NgxPrettyCheckboxModule { }\r\n"]}