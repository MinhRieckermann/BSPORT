<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="8/1/2018 9:21:34 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="HCMNTB0004"
  DTS:CreatorName="JR\hcm.tvm"
  DTS:DTSID="{98CC32BB-0455-47EB-BE11-53383A83FB5C}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.1300.371"
  DTS:LocaleID="1033"
  DTS:ObjectName="StagingBettingData_MultiUser"
  DTS:PackageType="5"
  DTS:VersionBuild="53"
  DTS:VersionGUID="{F3737C42-FDB9-4653-87B0-243B85E67A5F}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[DataBetCSV]"
      DTS:CreationName="FLATFILE"
      DTS:DTSID="{DA77DD68-D891-4084-B8DA-7A8A247CDD98}"
      DTS:ObjectName="DataBetCSV">
      <DTS:PropertyExpression
        DTS:Name="ConnectionString">@[User::FileName]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:Format="Delimited"
          DTS:LocaleID="1033"
          DTS:HeaderRowDelimiter="_x000D__x000A_"
          DTS:ColumnNamesInFirstDataRow="True"
          DTS:RowDelimiter=""
          DTS:TextQualifier="_x003C_none_x003E_"
          DTS:CodePage="65001"
          DTS:ConnectionString="E:\BetLearning\DATABET\Unprocess\BettingResult_08012018.csv">
          <DTS:FlatFileColumns>
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="No "
              DTS:DTSID="{8F1356F0-9860-49F2-8EEB-0D522F39B07C}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Bet Details"
              DTS:DTSID="{0A983B14-6A05-4F25-9C5A-C0E2200CCBF3}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Bet Type"
              DTS:DTSID="{64BF226E-C524-451D-AAB3-F45260157855}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Selection"
              DTS:DTSID="{1BFDCA3E-55A2-44B4-90E1-BD28FB23E7E2}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Stake"
              DTS:DTSID="{D50C2740-D24B-42DF-8AB0-01018535FC0E}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Win   Loss"
              DTS:DTSID="{9011E269-1D8C-474F-9215-CDFDFF07A241}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x000D__x000A_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="Status"
              DTS:DTSID="{094344D7-2965-4D73-9AF2-572F393CD2BF}"
              DTS:CreationName="" />
          </DTS:FlatFileColumns>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[XCASRVMDS001.Betting]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{5186E6BD-5F74-43DB-884E-3707105B5256}"
      DTS:ObjectName="XCASRVMDS001.Betting">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=XCASRVMDS001;Initial Catalog=Betting;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{92768FEB-2002-4EDD-B342-159CA105BD7F}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="FileName">
      <DTS:VariableValue
        DTS:DataType="8">E:\BetLearning\DATABET\Unprocess\BettingResult_08012018.csv</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{E4278C07-3C66-40CD-B0D2-FEC1EFCFAFA4}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="FileNameList">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{80217B37-B236-4B36-B8DF-0B3CAD04941C}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="FolderPath">
      <DTS:VariableValue
        DTS:DataType="8">E:\BetLearning\DATABET</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{F04A69FB-D827-4D3A-8EC2-9689313A7EC3}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="FolderPathProcessed">
      <DTS:VariableValue
        DTS:DataType="8">E:\BetLearning\DATABET\Processed</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{F13DA551-834A-4D75-AD45-942896866E26}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="FolderPathUnprocess">
      <DTS:VariableValue
        DTS:DataType="8">E:\BetLearning\DATABET\Unprocess</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{9508CA34-4D04-4C51-8F48-299C6DAFA870}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="LoadingDate">
      <DTS:VariableValue
        DTS:DataType="7">8/7/2018 3:58:27 PM</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{3733EC42-3F94-4E08-B5C0-00558F102D45}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="User">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Clean STG_Betdata"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{1F7F827C-C465-4F02-BECC-29EE0086CDBF}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Clean STG_Betdata"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2017 RC1; © 2017 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{5186E6BD-5F74-43DB-884E-3707105B5256}"
          SQLTask:SqlStatementSource="truncate table [Betting].[dbo].[STG_BetData]" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\GetDate"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{0DB5987C-27C0-427A-8F40-D1E1A016A438}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="GetDate"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2017 RC1; © 2017 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{5186E6BD-5F74-43DB-884E-3707105B5256}"
          SQLTask:SqlStatementSource="select GETDATE()" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Import csv Data Betting into STG"
      DTS:CreationName="STOCK:SEQUENCE"
      DTS:Description="Sequence Container"
      DTS:DTSID="{45AA996E-9B6A-4BEC-B36F-2D94F7C48D68}"
      DTS:ExecutableType="STOCK:SEQUENCE"
      DTS:LocaleID="-1"
      DTS:ObjectName="Import csv Data Betting into STG">
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG"
          DTS:CreationName="STOCK:FOREACHLOOP"
          DTS:Description="Foreach Loop Container"
          DTS:DTSID="{038DDD75-B6C4-4FBC-A28A-CD9704BC8FF6}"
          DTS:ExecutableType="STOCK:FOREACHLOOP"
          DTS:LocaleID="-1"
          DTS:ObjectName="Loop for all csv file to load data into STG">
          <DTS:ForEachEnumerator
            DTS:CreationName="Microsoft.ForEachFromVarEnumerator"
            DTS:DTSID="{EA70F633-0A26-4731-980E-200064BA840B}"
            DTS:ObjectName="{EA70F633-0A26-4731-980E-200064BA840B}">
            <DTS:ObjectData>
              <FEEFVE
                VariableName="User::FileNameList" />
            </DTS:ObjectData>
          </DTS:ForEachEnumerator>
          <DTS:Variables />
          <DTS:Executables>
            <DTS:Executable
              DTS:refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData"
              DTS:CreationName="Microsoft.Pipeline"
              DTS:Description="Data Flow Task"
              DTS:DTSID="{48C77304-466E-475A-8E86-A20AFDB3A047}"
              DTS:ExecutableType="Microsoft.Pipeline"
              DTS:LocaleID="-1"
              DTS:ObjectName="CSV BetData"
              DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
              <DTS:Variables />
              <DTS:ObjectData>
                <pipeline
                  version="1">
                  <components>
                    <component
                      refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion step 1"
                      componentClassID="Microsoft.DataConvert"
                      contactInfo="Data Conversion;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                      description="Data Conversion"
                      name="Data Conversion step 1"
                      usesDispositions="true">
                      <inputs>
                        <input
                          refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion step 1.Inputs[Data Conversion Input]"
                          name="Data Conversion Input">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion step 1.Inputs[Data Conversion Input].Columns[No ]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="No "
                              lineageId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Flat File Source.Outputs[Flat File Source Output].Columns[No ]" />
                            <inputColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion step 1.Inputs[Data Conversion Input].Columns[Bet Details]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="Bet Details"
                              lineageId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Flat File Source.Outputs[Flat File Source Output].Columns[Bet Details]" />
                            <inputColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion step 1.Inputs[Data Conversion Input].Columns[Bet Type]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="Bet Type"
                              lineageId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Flat File Source.Outputs[Flat File Source Output].Columns[Bet Type]" />
                            <inputColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion step 1.Inputs[Data Conversion Input].Columns[Selection]"
                              cachedDataType="wstr"
                              cachedLength="500"
                              cachedName="Selection"
                              lineageId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Flat File Source.Outputs[Flat File Source Output].Columns[Selection]" />
                            <inputColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion step 1.Inputs[Data Conversion Input].Columns[Stake]"
                              cachedDataType="wstr"
                              cachedLength="500"
                              cachedName="Stake"
                              lineageId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Flat File Source.Outputs[Flat File Source Output].Columns[Stake]" />
                            <inputColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion step 1.Inputs[Data Conversion Input].Columns[Win   Loss]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="Win   Loss"
                              lineageId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Flat File Source.Outputs[Flat File Source Output].Columns[Win   Loss]" />
                            <inputColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion step 1.Inputs[Data Conversion Input].Columns[Status]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="Status"
                              lineageId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Flat File Source.Outputs[Flat File Source Output].Columns[Status]" />
                          </inputColumns>
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion step 1.Outputs[Data Conversion Output]"
                          exclusionGroup="1"
                          name="Data Conversion Output"
                          synchronousInputId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion step 1.Inputs[Data Conversion Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion step 1.Outputs[Data Conversion Output].Columns[Copy of No]"
                              dataType="nText"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              lineageId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion step 1.Outputs[Data Conversion Output].Columns[Copy of No]"
                              name="Copy of No"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Flat File Source.Outputs[Flat File Source Output].Columns[No ]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion step 1.Outputs[Data Conversion Output].Columns[Copy of Bet Details]"
                              dataType="nText"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              lineageId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion step 1.Outputs[Data Conversion Output].Columns[Copy of Bet Details]"
                              name="Copy of Bet Details"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Flat File Source.Outputs[Flat File Source Output].Columns[Bet Details]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion step 1.Outputs[Data Conversion Output].Columns[Copy of Bet Type]"
                              dataType="nText"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              lineageId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion step 1.Outputs[Data Conversion Output].Columns[Copy of Bet Type]"
                              name="Copy of Bet Type"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Flat File Source.Outputs[Flat File Source Output].Columns[Bet Type]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion step 1.Outputs[Data Conversion Output].Columns[Copy of Selection]"
                              dataType="nText"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              lineageId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion step 1.Outputs[Data Conversion Output].Columns[Copy of Selection]"
                              name="Copy of Selection"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Flat File Source.Outputs[Flat File Source Output].Columns[Selection]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion step 1.Outputs[Data Conversion Output].Columns[Copy of Stake]"
                              dataType="nText"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              lineageId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion step 1.Outputs[Data Conversion Output].Columns[Copy of Stake]"
                              name="Copy of Stake"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Flat File Source.Outputs[Flat File Source Output].Columns[Stake]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion step 1.Outputs[Data Conversion Output].Columns[Copy of Win   Loss]"
                              dataType="nText"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              lineageId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion step 1.Outputs[Data Conversion Output].Columns[Copy of Win   Loss]"
                              name="Copy of Win   Loss"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Flat File Source.Outputs[Flat File Source Output].Columns[Win   Loss]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion step 1.Outputs[Data Conversion Output].Columns[Copy of Status]"
                              dataType="nText"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              lineageId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion step 1.Outputs[Data Conversion Output].Columns[Copy of Status]"
                              name="Copy of Status"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Flat File Source.Outputs[Flat File Source Output].Columns[Status]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                        <output
                          refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion step 1.Outputs[Data Conversion Error Output]"
                          exclusionGroup="1"
                          isErrorOut="true"
                          name="Data Conversion Error Output"
                          synchronousInputId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion step 1.Inputs[Data Conversion Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion step 1.Outputs[Data Conversion Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion step 1.Outputs[Data Conversion Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion step 1.Outputs[Data Conversion Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion step 1.Outputs[Data Conversion Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion Step 2"
                      componentClassID="Microsoft.DataConvert"
                      contactInfo="Data Conversion;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                      description="Data Conversion"
                      name="Data Conversion Step 2"
                      usesDispositions="true">
                      <inputs>
                        <input
                          refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion Step 2.Inputs[Data Conversion Input]"
                          name="Data Conversion Input">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion Step 2.Inputs[Data Conversion Input].Columns[Copy of Bet Details]"
                              cachedDataType="nText"
                              cachedName="Copy of Bet Details"
                              lineageId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion step 1.Outputs[Data Conversion Output].Columns[Copy of Bet Details]" />
                            <inputColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion Step 2.Inputs[Data Conversion Input].Columns[Copy of Bet Type]"
                              cachedDataType="nText"
                              cachedName="Copy of Bet Type"
                              lineageId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion step 1.Outputs[Data Conversion Output].Columns[Copy of Bet Type]" />
                            <inputColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion Step 2.Inputs[Data Conversion Input].Columns[Copy of Selection]"
                              cachedDataType="nText"
                              cachedName="Copy of Selection"
                              lineageId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion step 1.Outputs[Data Conversion Output].Columns[Copy of Selection]" />
                            <inputColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion Step 2.Inputs[Data Conversion Input].Columns[Copy of Stake]"
                              cachedDataType="nText"
                              cachedName="Copy of Stake"
                              lineageId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion step 1.Outputs[Data Conversion Output].Columns[Copy of Stake]" />
                            <inputColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion Step 2.Inputs[Data Conversion Input].Columns[Copy of Win   Loss]"
                              cachedDataType="nText"
                              cachedName="Copy of Win   Loss"
                              lineageId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion step 1.Outputs[Data Conversion Output].Columns[Copy of Win   Loss]" />
                            <inputColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion Step 2.Inputs[Data Conversion Input].Columns[Copy of Status]"
                              cachedDataType="nText"
                              cachedName="Copy of Status"
                              lineageId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion step 1.Outputs[Data Conversion Output].Columns[Copy of Status]" />
                            <inputColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion Step 2.Inputs[Data Conversion Input].Columns[Copy of No]"
                              cachedDataType="nText"
                              cachedName="Copy of No"
                              lineageId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion step 1.Outputs[Data Conversion Output].Columns[Copy of No]" />
                            <inputColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion Step 2.Inputs[Data Conversion Input].Columns[UserName]"
                              cachedDataType="wstr"
                              cachedLength="500"
                              cachedName="UserName"
                              lineageId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Derived Column.Outputs[Derived Column Output].Columns[UserName]" />
                          </inputColumns>
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion Step 2.Outputs[Data Conversion Output]"
                          exclusionGroup="1"
                          name="Data Conversion Output"
                          synchronousInputId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion Step 2.Inputs[Data Conversion Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion Step 2.Outputs[Data Conversion Output].Columns[Copy of Copy of Bet Details]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              length="50"
                              lineageId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion Step 2.Outputs[Data Conversion Output].Columns[Copy of Copy of Bet Details]"
                              name="Copy of Copy of Bet Details"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion step 1.Outputs[Data Conversion Output].Columns[Copy of Bet Details]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion Step 2.Outputs[Data Conversion Output].Columns[Copy of Copy of Bet Type]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              length="50"
                              lineageId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion Step 2.Outputs[Data Conversion Output].Columns[Copy of Copy of Bet Type]"
                              name="Copy of Copy of Bet Type"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion step 1.Outputs[Data Conversion Output].Columns[Copy of Bet Type]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion Step 2.Outputs[Data Conversion Output].Columns[Copy of Copy of Selection]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              length="1000"
                              lineageId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion Step 2.Outputs[Data Conversion Output].Columns[Copy of Copy of Selection]"
                              name="Copy of Copy of Selection"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion step 1.Outputs[Data Conversion Output].Columns[Copy of Selection]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion Step 2.Outputs[Data Conversion Output].Columns[Copy of Copy of Stake]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              length="1000"
                              lineageId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion Step 2.Outputs[Data Conversion Output].Columns[Copy of Copy of Stake]"
                              name="Copy of Copy of Stake"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion step 1.Outputs[Data Conversion Output].Columns[Copy of Stake]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion Step 2.Outputs[Data Conversion Output].Columns[Copy of Copy of Win   Loss]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              length="50"
                              lineageId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion Step 2.Outputs[Data Conversion Output].Columns[Copy of Copy of Win   Loss]"
                              name="Copy of Copy of Win   Loss"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion step 1.Outputs[Data Conversion Output].Columns[Copy of Win   Loss]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion Step 2.Outputs[Data Conversion Output].Columns[Copy of Copy of Status]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              length="50"
                              lineageId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion Step 2.Outputs[Data Conversion Output].Columns[Copy of Copy of Status]"
                              name="Copy of Copy of Status"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion step 1.Outputs[Data Conversion Output].Columns[Copy of Status]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion Step 2.Outputs[Data Conversion Output].Columns[Copy of Copy of No]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              length="50"
                              lineageId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion Step 2.Outputs[Data Conversion Output].Columns[Copy of Copy of No]"
                              name="Copy of Copy of No"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion step 1.Outputs[Data Conversion Output].Columns[Copy of No]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion Step 2.Outputs[Data Conversion Output].Columns[Copy of UserName]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              length="500"
                              lineageId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion Step 2.Outputs[Data Conversion Output].Columns[Copy of UserName]"
                              name="Copy of UserName"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Derived Column.Outputs[Derived Column Output].Columns[UserName]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                        <output
                          refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion Step 2.Outputs[Data Conversion Error Output]"
                          exclusionGroup="1"
                          isErrorOut="true"
                          name="Data Conversion Error Output"
                          synchronousInputId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion Step 2.Inputs[Data Conversion Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion Step 2.Outputs[Data Conversion Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion Step 2.Outputs[Data Conversion Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion Step 2.Outputs[Data Conversion Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion Step 2.Outputs[Data Conversion Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Derived Column"
                      componentClassID="Microsoft.DerivedColumn"
                      contactInfo="Derived Column;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                      description="Creates new column values by applying expressions to transformation input columns. Create new columns or overwrite existing ones. For example, concatenate the values from the 'first name' and 'last name' column to make a 'full name' column."
                      name="Derived Column"
                      usesDispositions="true">
                      <inputs>
                        <input
                          refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Derived Column.Inputs[Derived Column Input]"
                          description="Input to the Derived Column Transformation"
                          name="Derived Column Input">
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Derived Column.Outputs[Derived Column Output]"
                          description="Default Output of the Derived Column Transformation"
                          exclusionGroup="1"
                          name="Derived Column Output"
                          synchronousInputId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Derived Column.Inputs[Derived Column Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Derived Column.Outputs[Derived Column Output].Columns[UserName]"
                              dataType="wstr"
                              errorOrTruncationOperation="Computation"
                              errorRowDisposition="FailComponent"
                              length="500"
                              lineageId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Derived Column.Outputs[Derived Column Output].Columns[UserName]"
                              name="UserName"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Expression"
                                  name="Expression">@[User::User]</property>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Friendly Expression"
                                  expressionType="Notify"
                                  name="FriendlyExpression">@[User::User]</property>
                              </properties>
                            </outputColumn>
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                        <output
                          refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Derived Column.Outputs[Derived Column Error Output]"
                          description="Error Output of the Derived Column Transformation"
                          exclusionGroup="1"
                          isErrorOut="true"
                          name="Derived Column Error Output"
                          synchronousInputId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Derived Column.Inputs[Derived Column Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Derived Column.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Derived Column.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Derived Column.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Derived Column.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Flat File Source"
                      componentClassID="Microsoft.FlatFileSource"
                      contactInfo="Flat File Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;1"
                      description="Flat File Source"
                      localeId="1033"
                      name="Flat File Source"
                      usesDispositions="true"
                      version="1">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Specifies whether zero-length columns are treated as null."
                          name="RetainNulls">false</property>
                        <property
                          dataType="System.String"
                          description="Specifies the name of an output column containing the file name. If no name is specified, no output column containing the file name will be generated."
                          name="FileNameColumnName"></property>
                      </properties>
                      <connections>
                        <connection
                          refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Flat File Source.Connections[FlatFileConnection]"
                          connectionManagerID="Package.ConnectionManagers[DataBetCSV]"
                          connectionManagerRefId="Package.ConnectionManagers[DataBetCSV]"
                          name="FlatFileConnection" />
                      </connections>
                      <outputs>
                        <output
                          refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Flat File Source.Outputs[Flat File Source Output]"
                          name="Flat File Source Output">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Flat File Source.Outputs[Flat File Source Output].Columns[No ]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[No ]"
                              length="50"
                              lineageId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Flat File Source.Outputs[Flat File Source Output].Columns[No ]"
                              name="No "
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the data is in binary format."
                                  name="UseBinaryFormat">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Flat File Source.Outputs[Flat File Source Output].Columns[Bet Details]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[Bet Details]"
                              length="50"
                              lineageId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Flat File Source.Outputs[Flat File Source Output].Columns[Bet Details]"
                              name="Bet Details"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the data is in binary format."
                                  name="UseBinaryFormat">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Flat File Source.Outputs[Flat File Source Output].Columns[Bet Type]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[Bet Type]"
                              length="50"
                              lineageId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Flat File Source.Outputs[Flat File Source Output].Columns[Bet Type]"
                              name="Bet Type"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the data is in binary format."
                                  name="UseBinaryFormat">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Flat File Source.Outputs[Flat File Source Output].Columns[Selection]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[Selection]"
                              length="500"
                              lineageId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Flat File Source.Outputs[Flat File Source Output].Columns[Selection]"
                              name="Selection"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the data is in binary format."
                                  name="UseBinaryFormat">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Flat File Source.Outputs[Flat File Source Output].Columns[Stake]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[Stake]"
                              length="500"
                              lineageId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Flat File Source.Outputs[Flat File Source Output].Columns[Stake]"
                              name="Stake"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the data is in binary format."
                                  name="UseBinaryFormat">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Flat File Source.Outputs[Flat File Source Output].Columns[Win   Loss]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[Win   Loss]"
                              length="50"
                              lineageId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Flat File Source.Outputs[Flat File Source Output].Columns[Win   Loss]"
                              name="Win   Loss"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the data is in binary format."
                                  name="UseBinaryFormat">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Flat File Source.Outputs[Flat File Source Output].Columns[Status]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              externalMetadataColumnId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[Status]"
                              length="50"
                              lineageId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Flat File Source.Outputs[Flat File Source Output].Columns[Status]"
                              name="Status"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the data is in binary format."
                                  name="UseBinaryFormat">false</property>
                              </properties>
                            </outputColumn>
                          </outputColumns>
                          <externalMetadataColumns
                            isUsed="True">
                            <externalMetadataColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[No ]"
                              codePage="65001"
                              dataType="str"
                              length="50"
                              name="No " />
                            <externalMetadataColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[Bet Details]"
                              codePage="65001"
                              dataType="str"
                              length="50"
                              name="Bet Details" />
                            <externalMetadataColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[Bet Type]"
                              codePage="65001"
                              dataType="str"
                              length="50"
                              name="Bet Type" />
                            <externalMetadataColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[Selection]"
                              codePage="65001"
                              dataType="str"
                              length="50"
                              name="Selection" />
                            <externalMetadataColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[Stake]"
                              codePage="65001"
                              dataType="str"
                              length="50"
                              name="Stake" />
                            <externalMetadataColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[Win   Loss]"
                              codePage="65001"
                              dataType="str"
                              length="50"
                              name="Win   Loss" />
                            <externalMetadataColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Flat File Source.Outputs[Flat File Source Output].ExternalColumns[Status]"
                              codePage="65001"
                              dataType="str"
                              length="50"
                              name="Status" />
                          </externalMetadataColumns>
                        </output>
                        <output
                          refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Flat File Source.Outputs[Flat File Source Error Output]"
                          isErrorOut="true"
                          name="Flat File Source Error Output">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Flat File Source.Outputs[Flat File Source Error Output].Columns[Flat File Source Error Output Column]"
                              codePage="1252"
                              dataType="text"
                              description="Flat File Source Error Output Column"
                              lineageId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Flat File Source.Outputs[Flat File Source Error Output].Columns[Flat File Source Error Output Column]"
                              name="Flat File Source Error Output Column" />
                            <outputColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Flat File Source.Outputs[Flat File Source Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Flat File Source.Outputs[Flat File Source Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Flat File Source.Outputs[Flat File Source Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Flat File Source.Outputs[Flat File Source Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\STG_BettingData"
                      componentClassID="Microsoft.OLEDBDestination"
                      contactInfo="OLE DB Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4"
                      description="OLE DB Destination"
                      name="STG_BettingData"
                      usesDispositions="true"
                      version="4">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                          name="CommandTimeout">0</property>
                        <property
                          dataType="System.String"
                          description="Specifies the name of the database object used to open a rowset."
                          name="OpenRowset">[dbo].[STG_BetData]</property>
                        <property
                          dataType="System.String"
                          description="Specifies the variable that contains the name of the database object used to open a rowset."
                          name="OpenRowsetVariable"></property>
                        <property
                          dataType="System.String"
                          description="The SQL command to be executed."
                          name="SqlCommand"
                          UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor, Microsoft.DataTransformationServices.Controls, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"></property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the column code page to use when code page information is unavailable from the data source."
                          name="DefaultCodePage">1252</property>
                        <property
                          dataType="System.Boolean"
                          description="Forces the use of the DefaultCodePage property value when describing character data."
                          name="AlwaysUseDefaultCodePage">false</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the mode used to access the database."
                          name="AccessMode"
                          typeConverter="AccessMode">3</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the values supplied for identity columns will be copied to the destination. If false, values for identity columns will be auto-generated at the destination. Applies only if fast load is turned on."
                          name="FastLoadKeepIdentity">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the columns containing null will have null inserted in the destination. If false, columns containing null will have their default values inserted at the destination. Applies only if fast load is turned on."
                          name="FastLoadKeepNulls">false</property>
                        <property
                          dataType="System.String"
                          description="Specifies options to be used with fast load.  Applies only if fast load is turned on."
                          name="FastLoadOptions">TABLOCK,CHECK_CONSTRAINTS</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies when commits are issued during data insertion.  A value of 0 specifies that one commit will be issued at the end of data insertion.  Applies only if fast load is turned on."
                          name="FastLoadMaxInsertCommitSize">2147483647</property>
                      </properties>
                      <connections>
                        <connection
                          refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\STG_BettingData.Connections[OleDbConnection]"
                          connectionManagerID="Package.ConnectionManagers[XCASRVMDS001.Betting]"
                          connectionManagerRefId="Package.ConnectionManagers[XCASRVMDS001.Betting]"
                          description="The OLE DB runtime connection used to access the database."
                          name="OleDbConnection" />
                      </connections>
                      <inputs>
                        <input
                          refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\STG_BettingData.Inputs[OLE DB Destination Input]"
                          errorOrTruncationOperation="Insert"
                          errorRowDisposition="FailComponent"
                          hasSideEffects="true"
                          name="OLE DB Destination Input">
                          <inputColumns>
                            <inputColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\STG_BettingData.Inputs[OLE DB Destination Input].Columns[Copy of Copy of No]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="Copy of Copy of No"
                              externalMetadataColumnId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\STG_BettingData.Inputs[OLE DB Destination Input].ExternalColumns[No.]"
                              lineageId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion Step 2.Outputs[Data Conversion Output].Columns[Copy of Copy of No]" />
                            <inputColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\STG_BettingData.Inputs[OLE DB Destination Input].Columns[Copy of Copy of Bet Details]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="Copy of Copy of Bet Details"
                              externalMetadataColumnId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\STG_BettingData.Inputs[OLE DB Destination Input].ExternalColumns[Bet Details]"
                              lineageId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion Step 2.Outputs[Data Conversion Output].Columns[Copy of Copy of Bet Details]" />
                            <inputColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\STG_BettingData.Inputs[OLE DB Destination Input].Columns[Copy of Copy of Bet Type]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="Copy of Copy of Bet Type"
                              externalMetadataColumnId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\STG_BettingData.Inputs[OLE DB Destination Input].ExternalColumns[Bet Type]"
                              lineageId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion Step 2.Outputs[Data Conversion Output].Columns[Copy of Copy of Bet Type]" />
                            <inputColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\STG_BettingData.Inputs[OLE DB Destination Input].Columns[Copy of Copy of Selection]"
                              cachedDataType="wstr"
                              cachedLength="1000"
                              cachedName="Copy of Copy of Selection"
                              externalMetadataColumnId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\STG_BettingData.Inputs[OLE DB Destination Input].ExternalColumns[Selection]"
                              lineageId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion Step 2.Outputs[Data Conversion Output].Columns[Copy of Copy of Selection]" />
                            <inputColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\STG_BettingData.Inputs[OLE DB Destination Input].Columns[Copy of Copy of Stake]"
                              cachedDataType="wstr"
                              cachedLength="1000"
                              cachedName="Copy of Copy of Stake"
                              externalMetadataColumnId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\STG_BettingData.Inputs[OLE DB Destination Input].ExternalColumns[Stake]"
                              lineageId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion Step 2.Outputs[Data Conversion Output].Columns[Copy of Copy of Stake]" />
                            <inputColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\STG_BettingData.Inputs[OLE DB Destination Input].Columns[Copy of Copy of Win   Loss]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="Copy of Copy of Win   Loss"
                              externalMetadataColumnId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\STG_BettingData.Inputs[OLE DB Destination Input].ExternalColumns[Win / Loss]"
                              lineageId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion Step 2.Outputs[Data Conversion Output].Columns[Copy of Copy of Win   Loss]" />
                            <inputColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\STG_BettingData.Inputs[OLE DB Destination Input].Columns[Copy of Copy of Status]"
                              cachedDataType="wstr"
                              cachedLength="50"
                              cachedName="Copy of Copy of Status"
                              externalMetadataColumnId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\STG_BettingData.Inputs[OLE DB Destination Input].ExternalColumns[Status]"
                              lineageId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion Step 2.Outputs[Data Conversion Output].Columns[Copy of Copy of Status]" />
                            <inputColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\STG_BettingData.Inputs[OLE DB Destination Input].Columns[Copy of UserName]"
                              cachedDataType="wstr"
                              cachedLength="500"
                              cachedName="Copy of UserName"
                              externalMetadataColumnId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\STG_BettingData.Inputs[OLE DB Destination Input].ExternalColumns[User]"
                              lineageId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion Step 2.Outputs[Data Conversion Output].Columns[Copy of UserName]" />
                          </inputColumns>
                          <externalMetadataColumns
                            isUsed="True">
                            <externalMetadataColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\STG_BettingData.Inputs[OLE DB Destination Input].ExternalColumns[No.]"
                              dataType="wstr"
                              length="50"
                              name="No." />
                            <externalMetadataColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\STG_BettingData.Inputs[OLE DB Destination Input].ExternalColumns[Bet Details]"
                              dataType="wstr"
                              length="500"
                              name="Bet Details" />
                            <externalMetadataColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\STG_BettingData.Inputs[OLE DB Destination Input].ExternalColumns[Bet Type]"
                              dataType="wstr"
                              length="500"
                              name="Bet Type" />
                            <externalMetadataColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\STG_BettingData.Inputs[OLE DB Destination Input].ExternalColumns[Selection]"
                              dataType="wstr"
                              length="3000"
                              name="Selection" />
                            <externalMetadataColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\STG_BettingData.Inputs[OLE DB Destination Input].ExternalColumns[Stake]"
                              dataType="wstr"
                              length="50"
                              name="Stake" />
                            <externalMetadataColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\STG_BettingData.Inputs[OLE DB Destination Input].ExternalColumns[Win / Loss]"
                              dataType="wstr"
                              length="50"
                              name="Win / Loss" />
                            <externalMetadataColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\STG_BettingData.Inputs[OLE DB Destination Input].ExternalColumns[Status]"
                              dataType="wstr"
                              length="50"
                              name="Status" />
                            <externalMetadataColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\STG_BettingData.Inputs[OLE DB Destination Input].ExternalColumns[Createdate]"
                              dataType="dbTimeStamp"
                              name="Createdate" />
                            <externalMetadataColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\STG_BettingData.Inputs[OLE DB Destination Input].ExternalColumns[User]"
                              dataType="wstr"
                              length="500"
                              name="User" />
                          </externalMetadataColumns>
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\STG_BettingData.Outputs[OLE DB Destination Error Output]"
                          exclusionGroup="1"
                          isErrorOut="true"
                          name="OLE DB Destination Error Output"
                          synchronousInputId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\STG_BettingData.Inputs[OLE DB Destination Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\STG_BettingData.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\STG_BettingData.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\STG_BettingData.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\STG_BettingData.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                  </components>
                  <paths>
                    <path
                      refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData.Paths[Data Conversion Output]"
                      endId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Derived Column.Inputs[Derived Column Input]"
                      name="Data Conversion Output"
                      startId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion step 1.Outputs[Data Conversion Output]" />
                    <path
                      refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData.Paths[Data Conversion Output1]"
                      endId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\STG_BettingData.Inputs[OLE DB Destination Input]"
                      name="Data Conversion Output"
                      startId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion Step 2.Outputs[Data Conversion Output]" />
                    <path
                      refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData.Paths[Derived Column Output]"
                      endId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion Step 2.Inputs[Data Conversion Input]"
                      name="Derived Column Output"
                      startId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Derived Column.Outputs[Derived Column Output]" />
                    <path
                      refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData.Paths[Flat File Source Output]"
                      endId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion step 1.Inputs[Data Conversion Input]"
                      name="Flat File Source Output"
                      startId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Flat File Source.Outputs[Flat File Source Output]" />
                  </paths>
                </pipeline>
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\File System Task"
              DTS:CreationName="Microsoft.FileSystemTask"
              DTS:Description="File System Task"
              DTS:DTSID="{C72C959B-A645-41B4-874C-954B23823720}"
              DTS:ExecutableType="Microsoft.FileSystemTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="File System Task"
              DTS:TaskContact="File System Task;Microsoft Corporation; SQL Server 2017 RC1; © 2017 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <FileSystemData
                  TaskOperationType="MoveFile"
                  TaskOverwriteDestFile="True"
                  TaskSourcePath="User::FileName"
                  TaskIsSourceVariable="True"
                  TaskDestinationPath="User::FolderPathProcessed"
                  TaskIsDestinationVariable="True" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\Get User Name"
              DTS:CreationName="Microsoft.ScriptTask"
              DTS:Description="Script Task"
              DTS:DTSID="{FC343D25-539A-4381-BD18-12007F2C6239}"
              DTS:ExecutableType="Microsoft.ScriptTask"
              DTS:LocaleID="-1"
              DTS:ObjectName="Get User Name"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <ScriptProject
                  Name="ST_b2e90d571dc845c2bf95d3b79fa76b3c"
                  VSTAMajorVersion="14"
                  VSTAMinorVersion="0"
                  Language="CSharp"
                  ReadOnlyVariables="User::FileName"
                  ReadWriteVariables="User::User">
                  <ProjectItem
                    Name="Properties\Resources.resx"
                    Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Settings.Designer.cs"
                    Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_b2e90d571dc845c2bf95d3b79fa76b3c.Properties.Settings.get_Default():ST_b2e90d571dc845c2bf95d3b79fa76b3c.Properties.Sett" +
    "ings")]

namespace ST_b2e90d571dc845c2bf95d3b79fa76b3c.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
                  <ProjectItem
                    Name="ScriptMain.cs"
                    Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
#endregion

namespace ST_b2e90d571dc845c2bf95d3b79fa76b3c
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            // TODO: Add your code here
            String FileFullName = this.Dts.Variables["FileName"].Value.ToString();
            int index = FileFullName.LastIndexOf("_");
            string UserNameFile = FileFullName.Substring((FileFullName.LastIndexOf("_") + 1), (FileFullName.Length - 1 - index));
            this.Dts.Variables["User"].Value = UserNameFile;


            Dts.TaskResult = (int)ScriptResults.Success;
		}

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
                  <ProjectItem
                    Name="Project"
                    Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>ST_b2e90d571dc845c2bf95d3b79fa76b3c</msb:CodeName>
		<msb:DisplayName>ST_b2e90d571dc845c2bf95d3b79fa76b3c</msb:DisplayName>
		<msb:ProjectId>{4482F115-4918-4204-AC2A-BCF810A2C912}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_b2e90d571dc845c2bf95d3b79fa76b3c.csproj"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\AssemblyInfo.cs"
                    Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_b2e90d571dc845c2bf95d3b79fa76b3c")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_b2e90d571dc845c2bf95d3b79fa76b3c")]
[assembly: AssemblyCopyright("Copyright @  2018")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
                  <ProjectItem
                    Name="ST_b2e90d571dc845c2bf95d3b79fa76b3c.csproj"
                    Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{9900F28E-F4FF-4CED-B850-A677017898FE}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_b2e90d571dc845c2bf95d3b79fa76b3c</RootNamespace>
    <AssemblyName>ST_b2e90d571dc845c2bf95d3b79fa76b3c</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile>
    </TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=13.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=13.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST130</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Settings.settings"
                    Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Resources.Designer.cs"
                    Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_b2e90d571dc845c2bf95d3b79fa76b3c.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_b2e90d571dc845c2bf95d3b79fa76b3c.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_b2e90d571dc845c2bf95d3b79fa76b3c.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_b2e90d571dc845c2bf95d3b79fa76b3c.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_b2e90d571dc845c2bf95d3b79fa76b3c.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
                  <BinaryItem
                    Name="ST_b2e90d571dc845c2bf95d3b79fa76b3c.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDABiBw14AAAAAAAAAAOAAIiALATAAABAAAAAIAAAAAAAAKi4A
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACAAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAANgtAABPAAAAAEAAAHgEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAMA4AAAAgAAAAEAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAHgEAAAAQAAAAAYAAAASAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAGAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAAAM
LgAAAAAAAEgAAAACAAUANCEAAOwLAAABAAAAAAAAACAtAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAABMwBAByAAAAAQAAEQIoEAAACm8RAAAKcgEAAHBvEgAACm8T
AAAKbxQAAAoKBnITAABwbxUAAAoLBgZyEwAAcG8VAAAKF1gGbxYAAAoXWQdZbxcAAAoMAigQAAAK
bxEAAApyFwAAcG8SAAAKCG8YAAAKAigQAAAKFm8ZAAAKKh4CKBoAAAoqHgIoGwAACiqufgEAAAQt
HnIhAABw0AMAAAIoHAAACm8dAAAKcx4AAAqAAQAABH4BAAAEKhp+AgAABCoeAoACAAAEKhp+AwAA
BCoeAigfAAAKKi5zCAAABoADAAAEKkJTSkIBAAEAAAAAAAwAAAB2NC4wLjMwMzE5AAAAAAUAbAAA
ANwDAAAjfgAASAQAAIgFAAAjU3RyaW5ncwAAAADQCQAAlAAAACNVUwBkCgAAEAAAACNHVUlEAAAA
dAoAAHgBAAAjQmxvYgAAAAAAAAACAAABVx2iAQkDAAAA+gEzABYAAAEAAAAeAAAABQAAAAYAAAAJ
AAAAAQAAAB8AAAACAAAAEAAAAAEAAAACAAAAAwAAAAQAAAABAAAABAAAAAEAAAABAAAAAACgAwEA
AAAAAAYAJQJwBAYAtAJwBAYAcQFdBA8A5AQAAAYAngEeBAYACAIeBAYA6QEeBAYAmwIeBAYARQIe
BAYAXgIeBAYAtQEeBAYA0AH4AgoAeQJPAwoA8ABPAwYA2APRAwYAVAFdBAYAVwXRAwYAQASQBAYA
MAQJBA4AJAGKAw4AhQGKAw4ADAH0AwYAOQFwBAoAeANPAxIAJgWbABIAbgCbAAYAFAPRAwYAuwDR
AwYAdwDRAwYAfQUeBAAAAAABAAAAAAABAAEAAQAQAOkDOgA5AAEAAQAAABAAlwTzBEUAAQADAAAB
EAAwBfMEWQADAAcAAwEAAEkFAAA9AAQACgARAN0DfAARAOAAgAARAF4AhAAGBikAiABWgDkFiwBW
gMAAiwBQIAAAAACGAO8DBgABAM4gAAAAAIYYUAQGAAEA1iAAAAAAgxhQBAYAAQDeIAAAAACTCDwE
jwABAAohAAAAAJMIyACUAAEAESEAAAAAkwjUAJkAAQAZIQAAAACWCF4FnwACACAhAAAAAIYYUAQG
AAIAKCEAAAAAkRhWBKQAAgAAAAEA5gIJAFAEAQARAFAEBgAZAFAECgApAFAEEAAxAFAEEAA5AFAE
EABBAFAEEABJAFAEEABRAFAEEABZAFAEEABhAFAEEABpAFAEBgCBAFAEBgCpAFAEFQC5AFAEBgBx
AEEFIQDBACIFJgDJAMgDKwDRANICMQCJABIDNQDZAOwCOQDZACUDPgDZABsDQgDRANwCSADBAGoF
AQBxAFAEBgCJAFAEBgDhAIkATQDhAHkFVACRAFAEWQCxAFAEBgAIABQAcgAIABgAdwApAHMA3wAu
AAsAtwAuABMAwAAuABsA3wAuACMA6AAuACsAEQEuADMAEQEuADsAEQEuAEMA6AAuAEsAFwEuAFMA
EQEuAFsALgFDAGMAdwBJAHMA3wBhAHsAdwBjAGsAdwAbAAMAAQAEAAMAAABABKgAAADoAK0AAABi
BbIAAgAEAAMAAgAFAAUAAQAGAAUAAgAHAAcABIAAAAEAAAAUHQRhAAAAAAAAOgAAAAQAAAAAAAAA
AAAAAGAAMQAAAAAADQAAAAAAAAAAAAAAaQAwAwAAAAAEAAAAAAAAAAAAAABgANEDAAAAAA0AAAAA
AAAAAAAAAGkACgAAAAAAAAAAAAEAAAChBAAABQACAAAAAAAAPE1vZHVsZT4ATWljcm9zb2Z0LlNx
bFNlcnZlci5NYW5hZ2VkRFRTAHZhbHVlX18AbXNjb3JsaWIAU1RfYjJlOTBkNTcxZGM4NDVjMmJm
OTVkM2I3OWZhNzZiM2MAZGVmYXVsdEluc3RhbmNlAFZhcmlhYmxlAFJ1bnRpbWVUeXBlSGFuZGxl
AEdldFR5cGVGcm9tSGFuZGxlAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlJ1bnRpbWUAVHlwZQBG
YWlsdXJlAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAHJlc291cmNlQ3VsdHVyZQBWU1RBUlRTY3Jp
cHRPYmplY3RNb2RlbEJhc2UAQXBwbGljYXRpb25TZXR0aW5nc0Jhc2UARWRpdG9yQnJvd3NhYmxl
U3RhdGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUARGVidWdnZXJOb25Vc2VyQ29kZUF0dHJp
YnV0ZQBEZWJ1Z2dhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZUF0dHJpYnV0ZQBBc3NlbWJs
eVRpdGxlQXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAFRhcmdldEZyYW1ld29y
a0F0dHJpYnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlEZXNjcmlw
dGlvbkF0dHJpYnV0ZQBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAEFzc2VtYmx5UHJv
ZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBTU0lTU2NyaXB0VGFza0Vu
dHJ5UG9pbnRBdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRlAFJ1bnRpbWVDb21wYXRp
YmlsaXR5QXR0cmlidXRlAGdldF9WYWx1ZQBzZXRfVmFsdWUAdmFsdWUATGFzdEluZGV4T2YAU3lz
dGVtLlJ1bnRpbWUuVmVyc2lvbmluZwBUb1N0cmluZwBTdWJzdHJpbmcAZ2V0X0xlbmd0aABNaWNy
b3NvZnQuU3FsU2VydmVyLlNjcmlwdFRhc2sATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuVGFza3Mu
U2NyaXB0VGFzawBTY3JpcHRPYmplY3RNb2RlbABTeXN0ZW0uQ29tcG9uZW50TW9kZWwAU1RfYjJl
OTBkNTcxZGM4NDVjMmJmOTVkM2I3OWZhNzZiM2MuZGxsAGdldF9JdGVtAFN5c3RlbQBFbnVtAHJl
c291cmNlTWFuAFNjcmlwdE1haW4AU3lzdGVtLkNvbmZpZ3VyYXRpb24AU3lzdGVtLkdsb2JhbGl6
YXRpb24AU3lzdGVtLlJlZmxlY3Rpb24AQ3VsdHVyZUluZm8AZ2V0X1Jlc291cmNlTWFuYWdlcgAu
Y3RvcgAuY2N0b3IAU3lzdGVtLkRpYWdub3N0aWNzAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVyU2Vy
dmljZXMAU3lzdGVtLlJlc291cmNlcwBTVF9iMmU5MGQ1NzFkYzg0NWMyYmY5NWQzYjc5ZmE3NmIz
Yy5Qcm9wZXJ0aWVzLlJlc291cmNlcy5yZXNvdXJjZXMARGVidWdnaW5nTW9kZXMAU1RfYjJlOTBk
NTcxZGM4NDVjMmJmOTVkM2I3OWZhNzZiM2MuUHJvcGVydGllcwBnZXRfVmFyaWFibGVzAFNldHRp
bmdzAFN1Y2Nlc3MAZ2V0X0R0cwBTY3JpcHRSZXN1bHRzAE9iamVjdABnZXRfRGVmYXVsdABzZXRf
VGFza1Jlc3VsdABnZXRfQXNzZW1ibHkAAAAAEUYAaQBsAGUATgBhAG0AZQAAA18AAAlVAHMAZQBy
AABxUwBUAF8AYgAyAGUAOQAwAGQANQA3ADEAZABjADgANAA1AGMAMgBiAGYAOQA1AGQAMwBiADcA
OQBmAGEANwA2AGIAMwBjAC4AUAByAG8AcABlAHIAdABpAGUAcwAuAFIAZQBzAG8AdQByAGMAZQBz
AAAAI0NMTa574k+CMjxLdNo+GAAEIAEBCAMgAAEFIAEBEREEIAEBDgUgAQERUQUHAw4IDgQgABJh
BCAAEmUFIAESaRwDIAAcAyAADgQgAQgOAyAACAUgAg4ICAQgAQEcBgABEnERdQQgABJ5BiACAQ4S
eQi3elxWGTTgiQiJhF3NgIDMkQQAAAAABAEAAAADBhJJAwYSTQMGEhACBggDBhEUBAAAEkkEAAAS
TQUAAQESTQQAABIQAwAAAQQIABJJBAgAEk0ECAASEAgBAAgAAAAAAB4BAAEAVAIWV3JhcE5vbkV4
Y2VwdGlvblRocm93cwEIAQACAAAAAAAoAQAjU1RfYjJlOTBkNTcxZGM4NDVjMmJmOTVkM2I3OWZh
NzZiM2MAAAUBAAAAABYBABFDb3B5cmlnaHQgQCAgMjAxOAAASQEAGi5ORVRGcmFtZXdvcmssVmVy
c2lvbj12NC41AQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRIuTkVUIEZyYW1ld29yayA0LjW0AAAA
zsrvvgEAAACRAAAAbFN5c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGliLCBW
ZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYx
OTM0ZTA4OSNTeXN0ZW0uUmVzb3VyY2VzLlJ1bnRpbWVSZXNvdXJjZVNldAIAAAAAAAAAAAAAAFBB
RFBBRFC0AAAAAC4AAAAAAAAAAAAAGi4AAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwuAAAAAAAA
AAAAAAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAABABAAAAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAA
AABIAAAAWEAAABoEAAAAAAAAAAAAABoENAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBP
AAAAAAC9BO/+AAABAAAAAQAEYRQdAAABAARhFB0/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAA
RAAAAAEAVgBhAHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBv
AG4AAAAAAAAAsAR6AwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAABWAwAAAQAwADAA
MAAwADAANABiADAAAAAaAAEAAQBDAG8AbQBtAGUAbgB0AHMAAAAAAAAAIgABAAEAQwBvAG0AcABh
AG4AeQBOAGEAbQBlAAAAAAAAAAAAcAAkAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4A
AAAAAFMAVABfAGIAMgBlADkAMABkADUANwAxAGQAYwA4ADQANQBjADIAYgBmADkANQBkADMAYgA3
ADkAZgBhADcANgBiADMAYwAAAD4ADwABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAA
LgA3ADQANAA0AC4AMgA0ADgAMwA2AAAAAABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAA
AFMAVABfAGIAMgBlADkAMABkADUANwAxAGQAYwA4ADQANQBjADIAYgBmADkANQBkADMAYgA3ADkA
ZgBhADcANgBiADMAYwAuAGQAbABsAAAASAASAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0
AAAAQwBvAHAAeQByAGkAZwBoAHQAIABAACAAIAAyADAAMQA4AAAAKgABAAEATABlAGcAYQBsAFQA
cgBhAGQAZQBtAGEAcgBrAHMAAAAAAAAAAAB4ACgAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBu
AGEAbQBlAAAAUwBUAF8AYgAyAGUAOQAwAGQANQA3ADEAZABjADgANAA1AGMAMgBiAGYAOQA1AGQA
MwBiADcAOQBmAGEANwA2AGIAMwBjAC4AZABsAGwAAABoACQAAQBQAHIAbwBkAHUAYwB0AE4AYQBt
AGUAAAAAAFMAVABfAGIAMgBlADkAMABkADUANwAxAGQAYwA4ADQANQBjADIAYgBmADkANQBkADMA
YgA3ADkAZgBhADcANgBiADMAYwAAAEIADwABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAA
ADEALgAwAC4ANwA0ADQANAAuADIANAA4ADMANgAAAAAARgAPAAEAQQBzAHMAZQBtAGIAbAB5ACAA
VgBlAHIAcwBpAG8AbgAAADEALgAwAC4ANwA0ADQANAAuADIANAA4ADMANgAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAwAAAAsPgAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
                </ScriptProject>
              </DTS:ObjectData>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:PrecedenceConstraints>
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG.PrecedenceConstraints[Constraint]"
              DTS:CreationName=""
              DTS:DTSID="{3BD14C5F-76B5-44A8-85C6-4A2E9C33C762}"
              DTS:From="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint"
              DTS:To="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\File System Task" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG.PrecedenceConstraints[Constraint 1]"
              DTS:CreationName=""
              DTS:DTSID="{8A3DB103-B28B-44DF-9B7F-465FDF9EF859}"
              DTS:From="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\Get User Name"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 1"
              DTS:To="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData" />
          </DTS:PrecedenceConstraints>
          <DTS:ForEachVariableMappings>
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{E69DEFCE-0F5C-4CF5-8198-8851FEB6A4A8}"
              DTS:ObjectName="{E69DEFCE-0F5C-4CF5-8198-8851FEB6A4A8}"
              DTS:ValueIndex="0"
              DTS:VariableName="User::FileName" />
          </DTS:ForEachVariableMappings>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Import csv Data Betting into STG\Read ALL File"
          DTS:CreationName="Microsoft.ScriptTask"
          DTS:Description="Script Task"
          DTS:DTSID="{E83B0E11-CF07-4895-B8F0-24F8FAA6F0C6}"
          DTS:ExecutableType="Microsoft.ScriptTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Read ALL File"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_381faf6f5d48495c8526772459535b9d"
              VSTAMajorVersion="14"
              VSTAMinorVersion="0"
              Language="CSharp"
              ReadOnlyVariables="User::FolderPath"
              ReadWriteVariables="User::FileNameList,User::FolderPathUnprocess">
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_381faf6f5d48495c8526772459535b9d.Properties.Settings.get_Default():ST_381faf6f5d48495c8526772459535b9d.Properties.Sett" +
    "ings")]

namespace ST_381faf6f5d48495c8526772459535b9d.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
#endregion

namespace ST_381faf6f5d48495c8526772459535b9d
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            // read files name from folder
            string FolderPath = this.Dts.Variables["FolderPath"].Value.ToString();
            string folderFullData = FolderPath + "\\Unprocess";
            string[] cvsfiles = GetFileNames(folderFullData, "*.csv");
            this.Dts.Variables["FileNameList"].Value = cvsfiles;
            this.Dts.Variables["FolderPathUnprocess"].Value = FolderPath + "\\Unprocess";
            // TODO: Add your code here

            Dts.TaskResult = (int)ScriptResults.Success;
		}
        private static string[] GetFileNames(string path, string filter)
        {
            string[] files = System.IO.Directory.GetFiles(path, filter, System.IO.SearchOption.AllDirectories);
            //for (int i = 0; i < files.Length; i++)
            //{
            //    files[i] = System.IO.Path.GetFileName(files[i]);
            //}
            return files;
        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>ST_381faf6f5d48495c8526772459535b9d</msb:CodeName>
		<msb:DisplayName>ST_381faf6f5d48495c8526772459535b9d</msb:DisplayName>
		<msb:ProjectId>{1F1DC838-EB7E-4AC1-BDA8-E55C4BEA33B9}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_381faf6f5d48495c8526772459535b9d.csproj"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="ST_381faf6f5d48495c8526772459535b9d.csproj"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{2d792b87-55f4-4735-8b99-05e269ac1485}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_381faf6f5d48495c8526772459535b9d</RootNamespace>
    <AssemblyName>ST_381faf6f5d48495c8526772459535b9d</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=13.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=13.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="ScriptTask" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoCommandLine="" DebugInfoWorkingDir="" IconImageList="" />
        <Host Name="ScriptTask" GeneratedNamespace="$safeprojectname" IconIndex=""></Host>
        <ProjectClient>
          <HostIdentifier>SSIS_ST130</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_381faf6f5d48495c8526772459535b9d")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_381faf6f5d48495c8526772459535b9d")]
[assembly: AssemblyCopyright("Copyright @  2018")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_381faf6f5d48495c8526772459535b9d.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_381faf6f5d48495c8526772459535b9d.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_381faf6f5d48495c8526772459535b9d.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_381faf6f5d48495c8526772459535b9d.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_381faf6f5d48495c8526772459535b9d.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <BinaryItem
                Name="ST_381faf6f5d48495c8526772459535b9d.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAByBw14AAAAAAAAAAOAAIiALATAAABAAAAAIAAAAAAAA9i4A
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACAAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAKQuAABPAAAAAEAAAHgEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAA/A4AAAAgAAAAEAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAHgEAAAAQAAAAAYAAAASAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAGAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAADY
LgAAAAAAAEgAAAACAAUAUCEAAJwMAAABAAAAAAAAAOwtAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAABMwAwCDAAAAAQAAEQIoEAAACm8RAAAKcgEAAHBvEgAACm8T
AAAKbxQAAAoKBnIXAABwKBUAAApyLQAAcCgCAAAGCwIoEAAACm8RAAAKcjkAAHBvEgAACgdvFgAA
CgIoEAAACm8RAAAKclMAAHBvEgAACgZyFwAAcCgVAAAKbxYAAAoCKBAAAAoWbxcAAAoqJgIDFygY
AAAKKh4CKBkAAAoqHgIoGgAACiqufgEAAAQtHnJ7AABw0AMAAAIoGwAACm8cAAAKcx0AAAqAAQAA
BH4BAAAEKhp+AgAABCoeAoACAAAEKhp+AwAABCoeAigeAAAKKi5zCQAABoADAAAEKgBCU0pCAQAB
AAAAAAAMAAAAdjQuMC4zMDMxOQAAAAAFAGwAAAD8AwAAI34AAGgEAACwBQAAI1N0cmluZ3MAAAAA
GAoAAPAAAAAjVVMACAsAABAAAAAjR1VJRAAAABgLAACEAQAAI0Jsb2IAAAAAAAAAAgAAAVcdogEJ
AwAAAPoBMwAWAAABAAAAIAAAAAUAAAAGAAAACgAAAAMAAAAeAAAAAgAAABAAAAABAAAAAgAAAAMA
AAAEAAAAAQAAAAQAAAABAAAAAQAAAAAAjgMBAAAAAAAGAC8CcgQGAL4CcgQGAHsBXwQPAOYEAAAG
AKgBDAQGABICDAQGAPMBDAQGAKUCDAQGAE8CDAQGAGgCDAQGAL8BDAQGANoB9gIKAIMCPQMKAPoA
PQMGAMYDvwMGAF4BXwQGAHYFvwMGADsEkgQGACsE9wMOAC4BeAMOAI8BeAMOABYB4gMGAEMBcgQK
AGYDPQMSACgFpQASAHgApQAGABIDvwMGAKUFCgAGAB4ECgAGAMUAvwMGAIEAvwMGAJwFDAQAAAAA
AQAAAAAAAQABAAEAEADXA0QAOQABAAEAAAAQAJkE9QRFAAEABAAAARAASAX1BFkAAwAIAAMBAABh
BQAAPQAEAAsAEQDLA34AEQDqAIIAEQBoAIYABgYzAIoAVoBRBY0AVoDKAI0AUCAAAAAAhgDdAwYA
AQDfIAAAAACRADsFkQABAOkgAAAAAIYYUgQGAAMA8SAAAAAAgxhSBAYAAwD5IAAAAACTCDcEmAAD
ACUhAAAAAJMI0gCdAAMALCEAAAAAkwjeAKIAAwA0IQAAAACWCH0FqAAEADshAAAAAIYYUgQGAAQA
QyEAAAAAkRhYBK0ABAAAAAEAGQMAAAIASwQAAAEA8AIJAFIEAQARAFIEBgAZAFIECgApAFIEEAAx
AFIEEAA5AFIEEABBAFIEEABJAFIEEABRAFIEEABZAFIEEABhAFIEEABpAFIEBgCBAFIEBgCpAFIE
FQC5AFIEBgBxAFkFIQDBACQFJgDJALYDKwDRANwCMQCJABADNQDZAG8FOQDRAOYCPwDBAIkFAQDh
ADIFRABxAFIEBgCJAFIEBgDxAJMATQDxAJgFVACRAFIEWgCxAFIEBgAIABQAdAAIABgAeQApAHMA
6AAuAAsAwAAuABMAyQAuABsA6AAuACMA8QAuACsAGgEuADMAGgEuADsAGgEuAEMA8QAuAEsAIAEu
AFMAGgEuAFsANwFDAGMAeQBJAHMA6ABhAHsAeQBjAGsAeQAbAAMAAQAEAAMAAAA7BLEAAADyALYA
AACBBbsAAgAFAAMAAgAGAAUAAQAHAAUAAgAIAAcABIAAAAEAAAAUHQZhAAAAAAAARAAAAAQAAAAA
AAAAAAAAAGIAOwAAAAAADQAAAAAAAAAAAAAAawAeAwAAAAAEAAAAAAAAAAAAAABiAL8DAAAAAA0A
AAAAAAAAAAAAAGsAFAAAAAAAAAAAAAEAAACjBAAABQACAAAAAAAAPE1vZHVsZT4AU3lzdGVtLklP
AE1pY3Jvc29mdC5TcWxTZXJ2ZXIuTWFuYWdlZERUUwB2YWx1ZV9fAG1zY29ybGliAFNUXzM4MWZh
ZjZmNWQ0ODQ5NWM4NTI2NzcyNDU5NTM1YjlkAGRlZmF1bHRJbnN0YW5jZQBWYXJpYWJsZQBSdW50
aW1lVHlwZUhhbmRsZQBHZXRUeXBlRnJvbUhhbmRsZQBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5S
dW50aW1lAFR5cGUARmFpbHVyZQBnZXRfQ3VsdHVyZQBzZXRfQ3VsdHVyZQByZXNvdXJjZUN1bHR1
cmUAVlNUQVJUU2NyaXB0T2JqZWN0TW9kZWxCYXNlAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAEVk
aXRvckJyb3dzYWJsZVN0YXRlAENvbXBpbGVyR2VuZXJhdGVkQXR0cmlidXRlAERlYnVnZ2VyTm9u
VXNlckNvZGVBdHRyaWJ1dGUARGVidWdnYWJsZUF0dHJpYnV0ZQBFZGl0b3JCcm93c2FibGVBdHRy
aWJ1dGUAQXNzZW1ibHlUaXRsZUF0dHJpYnV0ZQBBc3NlbWJseVRyYWRlbWFya0F0dHJpYnV0ZQBU
YXJnZXRGcmFtZXdvcmtBdHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0aW9uQXR0cmlidXRlAEFz
c2VtYmx5RGVzY3JpcHRpb25BdHRyaWJ1dGUAQ29tcGlsYXRpb25SZWxheGF0aW9uc0F0dHJpYnV0
ZQBBc3NlbWJseVByb2R1Y3RBdHRyaWJ1dGUAQXNzZW1ibHlDb3B5cmlnaHRBdHRyaWJ1dGUAU1NJ
U1NjcmlwdFRhc2tFbnRyeVBvaW50QXR0cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBS
dW50aW1lQ29tcGF0aWJpbGl0eUF0dHJpYnV0ZQBnZXRfVmFsdWUAc2V0X1ZhbHVlAHZhbHVlAFN5
c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAVG9TdHJpbmcAcGF0aABNaWNyb3NvZnQuU3FsU2VydmVy
LlNjcmlwdFRhc2sATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuVGFza3MuU2NyaXB0VGFzawBTY3Jp
cHRPYmplY3RNb2RlbABTeXN0ZW0uQ29tcG9uZW50TW9kZWwAU1RfMzgxZmFmNmY1ZDQ4NDk1Yzg1
MjY3NzI0NTk1MzViOWQuZGxsAGdldF9JdGVtAFN5c3RlbQBFbnVtAHJlc291cmNlTWFuAFNjcmlw
dE1haW4AU3lzdGVtLkNvbmZpZ3VyYXRpb24AU3lzdGVtLkdsb2JhbGl6YXRpb24AU3lzdGVtLlJl
ZmxlY3Rpb24AU2VhcmNoT3B0aW9uAEN1bHR1cmVJbmZvAGdldF9SZXNvdXJjZU1hbmFnZXIAZmls
dGVyAC5jdG9yAC5jY3RvcgBTeXN0ZW0uRGlhZ25vc3RpY3MAU3lzdGVtLlJ1bnRpbWUuQ29tcGls
ZXJTZXJ2aWNlcwBTeXN0ZW0uUmVzb3VyY2VzAFNUXzM4MWZhZjZmNWQ0ODQ5NWM4NTI2NzcyNDU5
NTM1YjlkLlByb3BlcnRpZXMuUmVzb3VyY2VzLnJlc291cmNlcwBEZWJ1Z2dpbmdNb2RlcwBTVF8z
ODFmYWY2ZjVkNDg0OTVjODUyNjc3MjQ1OTUzNWI5ZC5Qcm9wZXJ0aWVzAGdldF9WYXJpYWJsZXMA
R2V0RmlsZXMAR2V0RmlsZU5hbWVzAFNldHRpbmdzAFN1Y2Nlc3MAZ2V0X0R0cwBTY3JpcHRSZXN1
bHRzAENvbmNhdABPYmplY3QAZ2V0X0RlZmF1bHQAc2V0X1Rhc2tSZXN1bHQAZ2V0X0Fzc2VtYmx5
AERpcmVjdG9yeQAAABVGAG8AbABkAGUAcgBQAGEAdABoAAAVXABVAG4AcAByAG8AYwBlAHMAcwAA
CyoALgBjAHMAdgAAGUYAaQBsAGUATgBhAG0AZQBMAGkAcwB0AAAnRgBvAGwAZABlAHIAUABhAHQA
aABVAG4AcAByAG8AYwBlAHMAcwAAcVMAVABfADMAOAAxAGYAYQBmADYAZgA1AGQANAA4ADQAOQA1
AGMAOAA1ADIANgA3ADcAMgA0ADUAOQA1ADMANQBiADkAZAAuAFAAcgBvAHAAZQByAHQAaQBlAHMA
LgBSAGUAcwBvAHUAcgBjAGUAcwAAAAAAud5n92IrB0670UrjNTA6HAAEIAEBCAMgAAEFIAEBEREE
IAEBDgUgAQERUQUHAg4dDgQgABJhBCAAEmUFIAESaRwDIAAcAyAADgUAAg4ODgQgAQEcCAADHQ4O
DhF1BgABEnkRfQUgABKAgQcgAgEOEoCBCLd6XFYZNOCJCImEXc2AgMyRBAAAAAAEAQAAAAMGEkkD
BhJNAwYSEAIGCAMGERQGAAIdDg4OBAAAEkkEAAASTQUAAQESTQQAABIQAwAAAQQIABJJBAgAEk0E
CAASEAgBAAgAAAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRocm93cwEIAQACAAAAAAAoAQAj
U1RfMzgxZmFmNmY1ZDQ4NDk1Yzg1MjY3NzI0NTk1MzViOWQAAAUBAAAAABYBABFDb3B5cmlnaHQg
QCAgMjAxOAAASQEAGi5ORVRGcmFtZXdvcmssVmVyc2lvbj12NC41AQBUDhRGcmFtZXdvcmtEaXNw
bGF5TmFtZRIuTkVUIEZyYW1ld29yayA0LjUAAAC0AAAAzsrvvgEAAACRAAAAbFN5c3RlbS5SZXNv
dXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9
bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0ZW0uUmVzb3VyY2Vz
LlJ1bnRpbWVSZXNvdXJjZVNldAIAAAAAAAAAAAAAAFBBRFBBRFC0AAAAzC4AAAAAAAAAAAAA5i4A
AAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAANguAAAAAAAAAAAAAAAAX0NvckRsbE1haW4AbXNjb3Jl
ZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAABABAAAAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAA
AABIAAAAWEAAABoEAAAAAAAAAAAAABoENAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBP
AAAAAAC9BO/+AAABAAAAAQAGYRQdAAABAAZhFB0/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAA
RAAAAAEAVgBhAHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBv
AG4AAAAAAAAAsAR6AwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAABWAwAAAQAwADAA
MAAwADAANABiADAAAAAaAAEAAQBDAG8AbQBtAGUAbgB0AHMAAAAAAAAAIgABAAEAQwBvAG0AcABh
AG4AeQBOAGEAbQBlAAAAAAAAAAAAcAAkAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4A
AAAAAFMAVABfADMAOAAxAGYAYQBmADYAZgA1AGQANAA4ADQAOQA1AGMAOAA1ADIANgA3ADcAMgA0
ADUAOQA1ADMANQBiADkAZAAAAD4ADwABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAA
LgA3ADQANAA0AC4AMgA0ADgAMwA4AAAAAABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAA
AFMAVABfADMAOAAxAGYAYQBmADYAZgA1AGQANAA4ADQAOQA1AGMAOAA1ADIANgA3ADcAMgA0ADUA
OQA1ADMANQBiADkAZAAuAGQAbABsAAAASAASAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0
AAAAQwBvAHAAeQByAGkAZwBoAHQAIABAACAAIAAyADAAMQA4AAAAKgABAAEATABlAGcAYQBsAFQA
cgBhAGQAZQBtAGEAcgBrAHMAAAAAAAAAAAB4ACgAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBu
AGEAbQBlAAAAUwBUAF8AMwA4ADEAZgBhAGYANgBmADUAZAA0ADgANAA5ADUAYwA4ADUAMgA2ADcA
NwAyADQANQA5ADUAMwA1AGIAOQBkAC4AZABsAGwAAABoACQAAQBQAHIAbwBkAHUAYwB0AE4AYQBt
AGUAAAAAAFMAVABfADMAOAAxAGYAYQBmADYAZgA1AGQANAA4ADQAOQA1AGMAOAA1ADIANgA3ADcA
MgA0ADUAOQA1ADMANQBiADkAZAAAAEIADwABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAA
ADEALgAwAC4ANwA0ADQANAAuADIANAA4ADMAOAAAAAAARgAPAAEAQQBzAHMAZQBtAGIAbAB5ACAA
VgBlAHIAcwBpAG8AbgAAADEALgAwAC4ANwA0ADQANAAuADIANAA4ADMAOAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAwAAAD4PgAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:PrecedenceConstraints>
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Import csv Data Betting into STG.PrecedenceConstraints[Constraint]"
          DTS:CreationName=""
          DTS:DTSID="{639C8F0C-C354-4C11-BB60-C1944D3B8242}"
          DTS:From="Package\Import csv Data Betting into STG\Read ALL File"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint"
          DTS:To="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG" />
      </DTS:PrecedenceConstraints>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\transform data bet"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{44F056CB-C877-4ABD-A563-E3ACE8F5DF2D}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="transform data bet"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2017 RC1; © 2017 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{5186E6BD-5F74-43DB-884E-3707105B5256}"
          SQLTask:SqlStatementSource="EXEC&#x9;[dbo].[Processdatabet_byUser]" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 1]"
      DTS:CreationName=""
      DTS:DTSID="{0CF9A254-2E4F-4B30-A21D-16503CE98504}"
      DTS:From="Package\Import csv Data Betting into STG"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 1"
      DTS:To="Package\transform data bet" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 3]"
      DTS:CreationName=""
      DTS:DTSID="{5A0DBFA9-E400-4682-BECB-8CA01C2A6B98}"
      DTS:From="Package\Clean STG_Betdata"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 3"
      DTS:To="Package\Import csv Data Betting into STG" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 4]"
      DTS:CreationName=""
      DTS:DTSID="{D567EB11-DB53-4C62-AA9A-7B1C763FCB76}"
      DTS:From="Package\GetDate"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 4"
      DTS:To="Package\Clean STG_Betdata" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="16" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="170,42"
          Id="Package\Clean STG_Betdata"
          TopLeft="784,0" />
        <NodeLayout
          Size="117,42"
          Id="Package\GetDate"
          TopLeft="402,11" />
        <NodeLayout
          Size="139,42"
          Id="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData"
          TopLeft="64,119" />
        <NodeLayout
          Size="158,42"
          Id="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\File System Task"
          TopLeft="87,184" />
        <NodeLayout
          Size="150,42"
          Id="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\Get User Name"
          TopLeft="96,31" />
        <EdgeLayout
          Id="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG.PrecedenceConstraints[Constraint]"
          TopLeft="133.5,161">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="32.5,23"
              Start="0,0"
              End="32.5,15.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,7.5" />
                  <mssgle:CubicBezierSegment
                    Point1="0,7.5"
                    Point2="0,11.5"
                    Point3="4,11.5" />
                  <mssgle:LineSegment
                    End="28.5,11.5" />
                  <mssgle:CubicBezierSegment
                    Point1="28.5,11.5"
                    Point2="32.5,11.5"
                    Point3="32.5,15.5" />
                  <mssgle:LineSegment
                    End="32.5,15.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG.PrecedenceConstraints[Constraint 1]"
          TopLeft="171,73">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-37.5,46"
              Start="0,0"
              End="-37.5,38.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,19" />
                  <mssgle:CubicBezierSegment
                    Point1="0,19"
                    Point2="0,23"
                    Point3="-4,23" />
                  <mssgle:LineSegment
                    End="-33.5,23" />
                  <mssgle:CubicBezierSegment
                    Point1="-33.5,23"
                    Point2="-37.5,23"
                    Point3="-37.5,27" />
                  <mssgle:LineSegment
                    End="-37.5,38.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="294,281"
          Size="294,324"
          Id="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG"
          TopLeft="104,80" />
        <NodeLayout
          Size="142,42"
          Id="Package\Import csv Data Betting into STG\Read ALL File"
          TopLeft="150,8" />
        <EdgeLayout
          Id="Package\Import csv Data Betting into STG.PrecedenceConstraints[Constraint]"
          TopLeft="221,50">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="30,30"
              Start="0,0"
              End="30,22.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,11" />
                  <mssgle:CubicBezierSegment
                    Point1="0,11"
                    Point2="0,15"
                    Point3="4,15" />
                  <mssgle:LineSegment
                    End="26,15" />
                  <mssgle:CubicBezierSegment
                    Point1="26,15"
                    Point2="30,15"
                    Point3="30,19" />
                  <mssgle:LineSegment
                    End="30,22.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="542,459"
          Size="542,502"
          Id="Package\Import csv Data Betting into STG"
          TopLeft="638,66" />
        <NodeLayout
          Size="167,42"
          Id="Package\transform data bet"
          TopLeft="178,422" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 1]"
          TopLeft="638,317">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-293,126"
              Start="0,0"
              End="-285.5,126">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="-142.5,0" />
                  <mssgle:CubicBezierSegment
                    Point1="-142.5,0"
                    Point2="-146.5,0"
                    Point3="-146.5,4" />
                  <mssgle:LineSegment
                    End="-146.5,122" />
                  <mssgle:CubicBezierSegment
                    Point1="-146.5,122"
                    Point2="-146.5,126"
                    Point3="-150.5,126" />
                  <mssgle:LineSegment
                    End="-285.5,126" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 3]"
          TopLeft="869,42">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="40,24"
              Start="0,0"
              End="40,16.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,8" />
                  <mssgle:CubicBezierSegment
                    Point1="0,8"
                    Point2="0,12"
                    Point3="4,12" />
                  <mssgle:LineSegment
                    End="36,12" />
                  <mssgle:CubicBezierSegment
                    Point1="36,12"
                    Point2="40,12"
                    Point3="40,16" />
                  <mssgle:LineSegment
                    End="40,16.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 4]"
          TopLeft="519,32">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="265,-11"
              Start="0,0"
              End="257.5,-11">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="128.5,0" />
                  <mssgle:CubicBezierSegment
                    Point1="128.5,0"
                    Point2="132.5,0"
                    Point3="132.5,-4" />
                  <mssgle:LineSegment
                    End="132.5,-7" />
                  <mssgle:CubicBezierSegment
                    Point1="132.5,-7"
                    Point2="132.5,-11"
                    Point3="136.5,-11" />
                  <mssgle:LineSegment
                    End="257.5,-11" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <TaskHost
    design-time-name="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData">
    <LayoutInfo>
      <GraphLayout
        Capacity="16" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="151,42"
          Id="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Flat File Source"
          TopLeft="573,53" />
        <NodeLayout
          Size="189,42"
          Id="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion step 1"
          TopLeft="786,124" />
        <NodeLayout
          Size="154,42"
          Id="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Derived Column"
          TopLeft="874,288" />
        <NodeLayout
          Size="190,42"
          Id="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\Data Conversion Step 2"
          TopLeft="659,217" />
        <NodeLayout
          Size="159,42"
          Id="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\STG_BettingData"
          TopLeft="598,363" />
        <EdgeLayout
          Id="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData.Paths[Flat File Source Output]"
          TopLeft="648.5,95">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="232,29"
              Start="0,0"
              End="232,21.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,10.5" />
                  <mssgle:CubicBezierSegment
                    Point1="0,10.5"
                    Point2="0,14.5"
                    Point3="4,14.5" />
                  <mssgle:LineSegment
                    End="228,14.5" />
                  <mssgle:CubicBezierSegment
                    Point1="228,14.5"
                    Point2="232,14.5"
                    Point3="232,18.5" />
                  <mssgle:LineSegment
                    End="232,21.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData.Paths[Derived Column Output]"
          TopLeft="926.666666666667,288">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-172.666666666667,-29"
              Start="0,0"
              End="-172.666666666667,-21.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,-7.77892030848329" />
                  <mssgle:CubicBezierSegment
                    Point1="0,-7.77892030848329"
                    Point2="0,-11.7789203084833"
                    Point3="-4,-11.7789203084833" />
                  <mssgle:LineSegment
                    End="-168.666666666667,-11.7789203084833" />
                  <mssgle:CubicBezierSegment
                    Point1="-168.666666666667,-11.7789203084833"
                    Point2="-172.666666666667,-11.7789203084833"
                    Point3="-172.666666666667,-15.7789203084833" />
                  <mssgle:LineSegment
                    End="-172.666666666667,-21.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData.Paths[Data Conversion Output1]"
          TopLeft="723.666666666667,259">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-46.1666666666666,104"
              Start="0,0"
              End="-46.1666666666666,96.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,38.1210855949896" />
                  <mssgle:CubicBezierSegment
                    Point1="0,38.1210855949896"
                    Point2="0,42.1210855949896"
                    Point3="-4,42.1210855949896" />
                  <mssgle:LineSegment
                    End="-42.1666666666666,42.1210855949896" />
                  <mssgle:CubicBezierSegment
                    Point1="-42.1666666666666,42.1210855949896"
                    Point2="-46.1666666666666,42.1210855949896"
                    Point3="-46.1666666666666,46.1210855949896" />
                  <mssgle:LineSegment
                    End="-46.1666666666666,96.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData.Paths[Data Conversion Output]"
          TopLeft="880.5,166">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="70.5,122"
              Start="0,0"
              End="70.5,114.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,57" />
                  <mssgle:CubicBezierSegment
                    Point1="0,57"
                    Point2="0,61"
                    Point3="4,61" />
                  <mssgle:LineSegment
                    End="66.5,61" />
                  <mssgle:CubicBezierSegment
                    Point1="66.5,61"
                    Point2="70.5,61"
                    Point3="70.5,65" />
                  <mssgle:LineSegment
                    End="70.5,114.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
  <PipelineComponentMetadata
    design-time-name="Package\Import csv Data Betting into STG\Loop for all csv file to load data into STG\CSV BetData\STG_BettingData">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>